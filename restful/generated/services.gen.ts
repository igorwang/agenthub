// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { VideoProcessV1NodeVideoProcessPostData, VideoProcessV1NodeVideoProcessPostResponse, ChunkingV1NodeChunkingPostData, ChunkingV1NodeChunkingPostResponse, ExtractionV1NodeExtractionPostData, ExtractionV1NodeExtractionPostResponse, IndexingV1NodeIndexingPostData, IndexingV1NodeIndexingPostResponse, GetModelsV1ChatModelsGetResponse, ChatV1ChatPostData, ChatV1ChatPostResponse, SearchV1ChatSearchPostData, SearchV1ChatSearchPostResponse, CreateCollectionV1CollectionPostData, CreateCollectionV1CollectionPostResponse, HealthCheckHealthGetResponse } from './types.gen';

export class WorkNodeService {
    /**
     * Video Process
     * @param data The data for the request.
     * @param data.key
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static videoProcessV1NodeVideoProcessPost(data: VideoProcessV1NodeVideoProcessPostData): CancelablePromise<VideoProcessV1NodeVideoProcessPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/node/video_process',
            query: {
                key: data.key
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
    /**
     * Chunking
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static chunkingV1NodeChunkingPost(data: ChunkingV1NodeChunkingPostData): CancelablePromise<ChunkingV1NodeChunkingPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/node/chunking',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
    /**
     * Extraction
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static extractionV1NodeExtractionPost(data: ExtractionV1NodeExtractionPostData): CancelablePromise<ExtractionV1NodeExtractionPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/node/extraction',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
    /**
     * Indexing
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static indexingV1NodeIndexingPost(data: IndexingV1NodeIndexingPostData): CancelablePromise<IndexingV1NodeIndexingPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/node/indexing',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
}

export class ChatService {
    /**
     * Get Models
     * @returns ModelInfo Successful Response
     * @throws ApiError
     */
    public static getModelsV1ChatModelsGet(): CancelablePromise<GetModelsV1ChatModelsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/v1/chat/models',
            errors: {
                404: 'Not found',
                502: 'Server error'
            }
        });
    }
    
    /**
     * Chat
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static chatV1ChatPost(data: ChatV1ChatPostData): CancelablePromise<ChatV1ChatPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/chat/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
    /**
     * Search
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SearchDocumentResultSchema Successful Response
     * @throws ApiError
     */
    public static searchV1ChatSearchPost(data: SearchV1ChatSearchPostData): CancelablePromise<SearchV1ChatSearchPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/chat/search',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
}

export class CollectionService {
    /**
     * Create Collection
     * @param data The data for the request.
     * @param data.collectionName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createCollectionV1CollectionPost(data: CreateCollectionV1CollectionPostData): CancelablePromise<CreateCollectionV1CollectionPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/v1/collection/',
            query: {
                collection_name: data.collectionName
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                502: 'Server error'
            }
        });
    }
    
}

export class HealthService {
    /**
     * Health Check
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthCheckHealthGet(): CancelablePromise<HealthCheckHealthGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/health'
        });
    }
    
}