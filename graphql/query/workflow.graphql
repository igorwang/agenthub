query getNodeTypeList(
  $where: node_type_bool_exp = {}
  $limit: Int = 10
  $offset: Int = 0
) {
  node_type(where: $where, limit: $limit, offset: $offset) {
    ...nodeTypeFragment
  }
}

fragment nodeTypeFragment on node_type {
  id
  label
  schema
  uiSchema
  type
  description
  icon
  default_data
  created_at
  updated_at
}

query getNodeList($where: flow_node_bool_exp = {}) {
  flow_node(where: $where) {
    ...flowNodeFragment
  }
}

fragment flowNodeFragment on flow_node {
  id
  label
  data
  flow_id
  created_at
  node_type {
    type
    schema
    id
    label
  }
  node_type_id
  position_x
  position_y
  updated_at
}

query getEdgeList($where: flow_edge_bool_exp = {}) {
  flow_edge(where: $where) {
    ...flowEdgeFragment
  }
}

fragment flowEdgeFragment on flow_edge {
  id
  source_id
  target_id
  type
  data
  flow_id
  animated
  created_at
  updated_at
  label
  sourceHandle
}

query getWorkflowById($id: uuid = "") {
  workflow_by_pk(id: $id) {
    id
    name
    updated_at
    created_at
    description
    workflow_type
    flow_nodes {
      ...flowNodeFragment
    }
    flow_edges {
      ...flowEdgeFragment
    }
    r_agent_workflows {
      id
      agent_id
    }
  }
}

query getWorkflowList(
  $where: workflow_bool_exp = {}
  $order_by: [workflow_order_by!] = {}
  $offset: Int = 10
  $limit: Int = 10
) {
  workflow(where: $where, order_by: $order_by, offset: $offset, limit: $limit) {
    ...workflowFragment
  }
  workflow_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}

fragment workflowFragment on workflow {
  id
  name
  updated_at
  workflow_type
  created_at
  description
  icon
  r_agent_workflows {
    id
    agent_id
  }
}

mutation insertFlowNode($objects: [flow_node_insert_input!] = {}) {
  insert_flow_node(objects: $objects) {
    affected_rows
  }
}

mutation insertFlowEdge($objects: [flow_edge_insert_input!] = {}) {
  insert_flow_edge(objects: $objects) {
    affected_rows
  }
}

query getWorkflowTemplateList(
  $where: workflow_template_bool_exp = {}
  $limit: Int = 10
  $offset: Int = 0
  $order_by: [workflow_template_order_by!] = {}
) {
  workflow_template(where: $where, limit: $limit, offset: $offset, order_by: $order_by) {
    ...WorkflowTemplateFragment
  }
  workflow_template_aggregate(where: $where) {
    aggregate {
      count
    }
  }
}

fragment WorkflowTemplateFragment on workflow_template {
  id
  name
  icon
  description
  data
  workflow_type
}
