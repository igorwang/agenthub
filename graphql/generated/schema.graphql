schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [Int!]

  """does the array contain the given value"""
  _contains: [Int!]
  _eq: [Int!]
  _gt: [Int!]
  _gte: [Int!]
  _in: [[Int!]!]
  _is_null: Boolean
  _lt: [Int!]
  _lte: [Int!]
  _neq: [Int!]
  _nin: [[Int!]!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "accounts"
"""
type accounts {
  access_token: String
  expires_at: Int
  id: uuid!
  id_token: String
  provider: String!
  providerAccountId: String!

  """An object relationship"""
  provider_type: provider_type!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "accounts"
"""
type accounts_aggregate {
  aggregate: accounts_aggregate_fields
  nodes: [accounts!]!
}

input accounts_aggregate_bool_exp {
  count: accounts_aggregate_bool_exp_count
}

input accounts_aggregate_bool_exp_count {
  arguments: [accounts_select_column!]
  distinct: Boolean
  filter: accounts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "accounts"
"""
type accounts_aggregate_fields {
  avg: accounts_avg_fields
  count(columns: [accounts_select_column!], distinct: Boolean): Int!
  max: accounts_max_fields
  min: accounts_min_fields
  stddev: accounts_stddev_fields
  stddev_pop: accounts_stddev_pop_fields
  stddev_samp: accounts_stddev_samp_fields
  sum: accounts_sum_fields
  var_pop: accounts_var_pop_fields
  var_samp: accounts_var_samp_fields
  variance: accounts_variance_fields
}

"""
order by aggregate values of table "accounts"
"""
input accounts_aggregate_order_by {
  avg: accounts_avg_order_by
  count: order_by
  max: accounts_max_order_by
  min: accounts_min_order_by
  stddev: accounts_stddev_order_by
  stddev_pop: accounts_stddev_pop_order_by
  stddev_samp: accounts_stddev_samp_order_by
  sum: accounts_sum_order_by
  var_pop: accounts_var_pop_order_by
  var_samp: accounts_var_samp_order_by
  variance: accounts_variance_order_by
}

"""
input type for inserting array relation for remote table "accounts"
"""
input accounts_arr_rel_insert_input {
  data: [accounts_insert_input!]!

  """upsert condition"""
  on_conflict: accounts_on_conflict
}

"""aggregate avg on columns"""
type accounts_avg_fields {
  expires_at: Float
}

"""
order by avg() on columns of table "accounts"
"""
input accounts_avg_order_by {
  expires_at: order_by
}

"""
Boolean expression to filter rows from the table "accounts". All fields are combined with a logical 'AND'.
"""
input accounts_bool_exp {
  _and: [accounts_bool_exp!]
  _not: accounts_bool_exp
  _or: [accounts_bool_exp!]
  access_token: String_comparison_exp
  expires_at: Int_comparison_exp
  id: uuid_comparison_exp
  id_token: String_comparison_exp
  provider: String_comparison_exp
  providerAccountId: String_comparison_exp
  provider_type: provider_type_bool_exp
  refresh_token: String_comparison_exp
  scope: String_comparison_exp
  session_state: String_comparison_exp
  token_type: String_comparison_exp
  type: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "accounts"
"""
enum accounts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  accounts_pkey
}

"""
input type for incrementing numeric columns in table "accounts"
"""
input accounts_inc_input {
  expires_at: Int
}

"""
input type for inserting data into table "accounts"
"""
input accounts_insert_input {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  provider_type: provider_type_obj_rel_insert_input
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type accounts_max_fields {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: uuid
}

"""
order by max() on columns of table "accounts"
"""
input accounts_max_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  provider: order_by
  providerAccountId: order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  type: order_by
  userId: order_by
}

"""aggregate min on columns"""
type accounts_min_fields {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: uuid
}

"""
order by min() on columns of table "accounts"
"""
input accounts_min_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  provider: order_by
  providerAccountId: order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  type: order_by
  userId: order_by
}

"""
response of any mutation on the table "accounts"
"""
type accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [accounts!]!
}

"""
on_conflict condition type for table "accounts"
"""
input accounts_on_conflict {
  constraint: accounts_constraint!
  update_columns: [accounts_update_column!]! = []
  where: accounts_bool_exp
}

"""Ordering options when selecting data from "accounts"."""
input accounts_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  provider: order_by
  providerAccountId: order_by
  provider_type: provider_type_order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: accounts"""
input accounts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "accounts"
"""
enum accounts_select_column {
  """column name"""
  access_token

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  id_token

  """column name"""
  provider

  """column name"""
  providerAccountId

  """column name"""
  refresh_token

  """column name"""
  scope

  """column name"""
  session_state

  """column name"""
  token_type

  """column name"""
  type

  """column name"""
  userId
}

"""
input type for updating data in table "accounts"
"""
input accounts_set_input {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: uuid
}

"""aggregate stddev on columns"""
type accounts_stddev_fields {
  expires_at: Float
}

"""
order by stddev() on columns of table "accounts"
"""
input accounts_stddev_order_by {
  expires_at: order_by
}

"""aggregate stddev_pop on columns"""
type accounts_stddev_pop_fields {
  expires_at: Float
}

"""
order by stddev_pop() on columns of table "accounts"
"""
input accounts_stddev_pop_order_by {
  expires_at: order_by
}

"""aggregate stddev_samp on columns"""
type accounts_stddev_samp_fields {
  expires_at: Float
}

"""
order by stddev_samp() on columns of table "accounts"
"""
input accounts_stddev_samp_order_by {
  expires_at: order_by
}

"""
Streaming cursor of the table "accounts"
"""
input accounts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: accounts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input accounts_stream_cursor_value_input {
  access_token: String
  expires_at: Int
  id: uuid
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: uuid
}

"""aggregate sum on columns"""
type accounts_sum_fields {
  expires_at: Int
}

"""
order by sum() on columns of table "accounts"
"""
input accounts_sum_order_by {
  expires_at: order_by
}

"""
update columns of table "accounts"
"""
enum accounts_update_column {
  """column name"""
  access_token

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  id_token

  """column name"""
  provider

  """column name"""
  providerAccountId

  """column name"""
  refresh_token

  """column name"""
  scope

  """column name"""
  session_state

  """column name"""
  token_type

  """column name"""
  type

  """column name"""
  userId
}

input accounts_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: accounts_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: accounts_set_input

  """filter the rows which have to be updated"""
  where: accounts_bool_exp!
}

"""aggregate var_pop on columns"""
type accounts_var_pop_fields {
  expires_at: Float
}

"""
order by var_pop() on columns of table "accounts"
"""
input accounts_var_pop_order_by {
  expires_at: order_by
}

"""aggregate var_samp on columns"""
type accounts_var_samp_fields {
  expires_at: Float
}

"""
order by var_samp() on columns of table "accounts"
"""
input accounts_var_samp_order_by {
  expires_at: order_by
}

"""aggregate variance on columns"""
type accounts_variance_fields {
  expires_at: Float
}

"""
order by variance() on columns of table "accounts"
"""
input accounts_variance_order_by {
  expires_at: order_by
}

"""AI Agent"""
type agent {
  avatar: String
  created_at: timestamptz!
  creator_id: uuid
  default_model: String
  description: String
  id: uuid!

  """An array relationship"""
  kbs(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): [r_agent_kb!]!

  """An aggregate relationship"""
  kbs_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): r_agent_kb_aggregate!
  name: String!

  """An object relationship"""
  system_prompt: prompt_hub
  system_prompt_id: Int
  type_id: Int
  updated_at: timestamptz!

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): [r_agent_user!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): r_agent_user_aggregate!
}

"""
aggregated selection of "agent"
"""
type agent_aggregate {
  aggregate: agent_aggregate_fields
  nodes: [agent!]!
}

input agent_aggregate_bool_exp {
  count: agent_aggregate_bool_exp_count
}

input agent_aggregate_bool_exp_count {
  arguments: [agent_select_column!]
  distinct: Boolean
  filter: agent_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "agent"
"""
type agent_aggregate_fields {
  avg: agent_avg_fields
  count(columns: [agent_select_column!], distinct: Boolean): Int!
  max: agent_max_fields
  min: agent_min_fields
  stddev: agent_stddev_fields
  stddev_pop: agent_stddev_pop_fields
  stddev_samp: agent_stddev_samp_fields
  sum: agent_sum_fields
  var_pop: agent_var_pop_fields
  var_samp: agent_var_samp_fields
  variance: agent_variance_fields
}

"""
order by aggregate values of table "agent"
"""
input agent_aggregate_order_by {
  avg: agent_avg_order_by
  count: order_by
  max: agent_max_order_by
  min: agent_min_order_by
  stddev: agent_stddev_order_by
  stddev_pop: agent_stddev_pop_order_by
  stddev_samp: agent_stddev_samp_order_by
  sum: agent_sum_order_by
  var_pop: agent_var_pop_order_by
  var_samp: agent_var_samp_order_by
  variance: agent_variance_order_by
}

"""
input type for inserting array relation for remote table "agent"
"""
input agent_arr_rel_insert_input {
  data: [agent_insert_input!]!

  """upsert condition"""
  on_conflict: agent_on_conflict
}

"""aggregate avg on columns"""
type agent_avg_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by avg() on columns of table "agent"
"""
input agent_avg_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""
Boolean expression to filter rows from the table "agent". All fields are combined with a logical 'AND'.
"""
input agent_bool_exp {
  _and: [agent_bool_exp!]
  _not: agent_bool_exp
  _or: [agent_bool_exp!]
  avatar: String_comparison_exp
  created_at: timestamptz_comparison_exp
  creator_id: uuid_comparison_exp
  default_model: String_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  kbs: r_agent_kb_bool_exp
  kbs_aggregate: r_agent_kb_aggregate_bool_exp
  name: String_comparison_exp
  system_prompt: prompt_hub_bool_exp
  system_prompt_id: Int_comparison_exp
  type_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  users: r_agent_user_bool_exp
  users_aggregate: r_agent_user_aggregate_bool_exp
}

"""
unique or primary key constraints on table "agent"
"""
enum agent_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  agent_pkey
}

"""
input type for incrementing numeric columns in table "agent"
"""
input agent_inc_input {
  system_prompt_id: Int
  type_id: Int
}

"""
input type for inserting data into table "agent"
"""
input agent_insert_input {
  avatar: String
  created_at: timestamptz
  creator_id: uuid
  default_model: String
  description: String
  id: uuid
  kbs: r_agent_kb_arr_rel_insert_input
  name: String
  system_prompt: prompt_hub_obj_rel_insert_input
  system_prompt_id: Int
  type_id: Int
  updated_at: timestamptz
  users: r_agent_user_arr_rel_insert_input
}

"""aggregate max on columns"""
type agent_max_fields {
  avatar: String
  created_at: timestamptz
  creator_id: uuid
  default_model: String
  description: String
  id: uuid
  name: String
  system_prompt_id: Int
  type_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "agent"
"""
input agent_max_order_by {
  avatar: order_by
  created_at: order_by
  creator_id: order_by
  default_model: order_by
  description: order_by
  id: order_by
  name: order_by
  system_prompt_id: order_by
  type_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type agent_min_fields {
  avatar: String
  created_at: timestamptz
  creator_id: uuid
  default_model: String
  description: String
  id: uuid
  name: String
  system_prompt_id: Int
  type_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "agent"
"""
input agent_min_order_by {
  avatar: order_by
  created_at: order_by
  creator_id: order_by
  default_model: order_by
  description: order_by
  id: order_by
  name: order_by
  system_prompt_id: order_by
  type_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "agent"
"""
type agent_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [agent!]!
}

"""
input type for inserting object relation for remote table "agent"
"""
input agent_obj_rel_insert_input {
  data: agent_insert_input!

  """upsert condition"""
  on_conflict: agent_on_conflict
}

"""
on_conflict condition type for table "agent"
"""
input agent_on_conflict {
  constraint: agent_constraint!
  update_columns: [agent_update_column!]! = []
  where: agent_bool_exp
}

"""Ordering options when selecting data from "agent"."""
input agent_order_by {
  avatar: order_by
  created_at: order_by
  creator_id: order_by
  default_model: order_by
  description: order_by
  id: order_by
  kbs_aggregate: r_agent_kb_aggregate_order_by
  name: order_by
  system_prompt: prompt_hub_order_by
  system_prompt_id: order_by
  type_id: order_by
  updated_at: order_by
  users_aggregate: r_agent_user_aggregate_order_by
}

"""primary key columns input for table: agent"""
input agent_pk_columns_input {
  id: uuid!
}

"""
select columns of table "agent"
"""
enum agent_select_column {
  """column name"""
  avatar

  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  default_model

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  system_prompt_id

  """column name"""
  type_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "agent"
"""
input agent_set_input {
  avatar: String
  created_at: timestamptz
  creator_id: uuid
  default_model: String
  description: String
  id: uuid
  name: String
  system_prompt_id: Int
  type_id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type agent_stddev_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by stddev() on columns of table "agent"
"""
input agent_stddev_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""aggregate stddev_pop on columns"""
type agent_stddev_pop_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by stddev_pop() on columns of table "agent"
"""
input agent_stddev_pop_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""aggregate stddev_samp on columns"""
type agent_stddev_samp_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by stddev_samp() on columns of table "agent"
"""
input agent_stddev_samp_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""
Streaming cursor of the table "agent"
"""
input agent_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: agent_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input agent_stream_cursor_value_input {
  avatar: String
  created_at: timestamptz
  creator_id: uuid
  default_model: String
  description: String
  id: uuid
  name: String
  system_prompt_id: Int
  type_id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type agent_sum_fields {
  system_prompt_id: Int
  type_id: Int
}

"""
order by sum() on columns of table "agent"
"""
input agent_sum_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""Type of agent"""
type agent_type {
  """An array relationship"""
  agents(
    """distinct select on columns"""
    distinct_on: [agent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_order_by!]

    """filter the rows returned"""
    where: agent_bool_exp
  ): [agent!]!

  """An aggregate relationship"""
  agents_aggregate(
    """distinct select on columns"""
    distinct_on: [agent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_order_by!]

    """filter the rows returned"""
    where: agent_bool_exp
  ): agent_aggregate!
  created_at: timestamptz!
  creator_id: uuid
  id: Int!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "agent_type"
"""
type agent_type_aggregate {
  aggregate: agent_type_aggregate_fields
  nodes: [agent_type!]!
}

"""
aggregate fields of "agent_type"
"""
type agent_type_aggregate_fields {
  avg: agent_type_avg_fields
  count(columns: [agent_type_select_column!], distinct: Boolean): Int!
  max: agent_type_max_fields
  min: agent_type_min_fields
  stddev: agent_type_stddev_fields
  stddev_pop: agent_type_stddev_pop_fields
  stddev_samp: agent_type_stddev_samp_fields
  sum: agent_type_sum_fields
  var_pop: agent_type_var_pop_fields
  var_samp: agent_type_var_samp_fields
  variance: agent_type_variance_fields
}

"""aggregate avg on columns"""
type agent_type_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "agent_type". All fields are combined with a logical 'AND'.
"""
input agent_type_bool_exp {
  _and: [agent_type_bool_exp!]
  _not: agent_type_bool_exp
  _or: [agent_type_bool_exp!]
  agents: agent_bool_exp
  agents_aggregate: agent_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  creator_id: uuid_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "agent_type"
"""
enum agent_type_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  agent_type_pkey
}

"""
input type for incrementing numeric columns in table "agent_type"
"""
input agent_type_inc_input {
  id: Int
}

"""
input type for inserting data into table "agent_type"
"""
input agent_type_insert_input {
  agents: agent_arr_rel_insert_input
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type agent_type_max_fields {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type agent_type_min_fields {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "agent_type"
"""
type agent_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [agent_type!]!
}

"""
on_conflict condition type for table "agent_type"
"""
input agent_type_on_conflict {
  constraint: agent_type_constraint!
  update_columns: [agent_type_update_column!]! = []
  where: agent_type_bool_exp
}

"""Ordering options when selecting data from "agent_type"."""
input agent_type_order_by {
  agents_aggregate: agent_aggregate_order_by
  created_at: order_by
  creator_id: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: agent_type"""
input agent_type_pk_columns_input {
  id: Int!
}

"""
select columns of table "agent_type"
"""
enum agent_type_select_column {
  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "agent_type"
"""
input agent_type_set_input {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type agent_type_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type agent_type_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type agent_type_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "agent_type"
"""
input agent_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: agent_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input agent_type_stream_cursor_value_input {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type agent_type_sum_fields {
  id: Int
}

"""
update columns of table "agent_type"
"""
enum agent_type_update_column {
  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input agent_type_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: agent_type_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: agent_type_set_input

  """filter the rows which have to be updated"""
  where: agent_type_bool_exp!
}

"""aggregate var_pop on columns"""
type agent_type_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type agent_type_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type agent_type_variance_fields {
  id: Float
}

"""
update columns of table "agent"
"""
enum agent_update_column {
  """column name"""
  avatar

  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  default_model

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  system_prompt_id

  """column name"""
  type_id

  """column name"""
  updated_at
}

input agent_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: agent_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: agent_set_input

  """filter the rows which have to be updated"""
  where: agent_bool_exp!
}

"""aggregate var_pop on columns"""
type agent_var_pop_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by var_pop() on columns of table "agent"
"""
input agent_var_pop_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""aggregate var_samp on columns"""
type agent_var_samp_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by var_samp() on columns of table "agent"
"""
input agent_var_samp_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""aggregate variance on columns"""
type agent_variance_fields {
  system_prompt_id: Float
  type_id: Float
}

"""
order by variance() on columns of table "agent"
"""
input agent_variance_order_by {
  system_prompt_id: order_by
  type_id: order_by
}

"""
columns and relationships of "chunking_strategy"
"""
type chunking_strategy {
  comment: String!
  value: String!
}

"""
aggregated selection of "chunking_strategy"
"""
type chunking_strategy_aggregate {
  aggregate: chunking_strategy_aggregate_fields
  nodes: [chunking_strategy!]!
}

"""
aggregate fields of "chunking_strategy"
"""
type chunking_strategy_aggregate_fields {
  count(columns: [chunking_strategy_select_column!], distinct: Boolean): Int!
  max: chunking_strategy_max_fields
  min: chunking_strategy_min_fields
}

"""
Boolean expression to filter rows from the table "chunking_strategy". All fields are combined with a logical 'AND'.
"""
input chunking_strategy_bool_exp {
  _and: [chunking_strategy_bool_exp!]
  _not: chunking_strategy_bool_exp
  _or: [chunking_strategy_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "chunking_strategy"
"""
enum chunking_strategy_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  chunking_strategy_pkey

  """
  unique or primary key constraint on columns "value"
  """
  chunking_strategy_value_key
}

enum chunking_strategy_enum {
  """length"""
  length

  """markdown"""
  markdown

  """page"""
  page

  """semantic"""
  semantic
}

"""
Boolean expression to compare columns of type "chunking_strategy_enum". All fields are combined with logical 'AND'.
"""
input chunking_strategy_enum_comparison_exp {
  _eq: chunking_strategy_enum
  _in: [chunking_strategy_enum!]
  _is_null: Boolean
  _neq: chunking_strategy_enum
  _nin: [chunking_strategy_enum!]
}

"""
input type for inserting data into table "chunking_strategy"
"""
input chunking_strategy_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type chunking_strategy_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type chunking_strategy_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "chunking_strategy"
"""
type chunking_strategy_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [chunking_strategy!]!
}

"""
on_conflict condition type for table "chunking_strategy"
"""
input chunking_strategy_on_conflict {
  constraint: chunking_strategy_constraint!
  update_columns: [chunking_strategy_update_column!]! = []
  where: chunking_strategy_bool_exp
}

"""Ordering options when selecting data from "chunking_strategy"."""
input chunking_strategy_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: chunking_strategy"""
input chunking_strategy_pk_columns_input {
  value: String!
}

"""
select columns of table "chunking_strategy"
"""
enum chunking_strategy_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "chunking_strategy"
"""
input chunking_strategy_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "chunking_strategy"
"""
input chunking_strategy_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: chunking_strategy_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input chunking_strategy_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "chunking_strategy"
"""
enum chunking_strategy_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input chunking_strategy_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: chunking_strategy_set_input

  """filter the rows which have to be updated"""
  where: chunking_strategy_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "files"
"""
type files {
  content_type: String
  created_at: timestamptz!
  creator_id: uuid
  ext: String
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  path: String
  provider: String!
  provider_metadata(
    """JSON select path"""
    path: String
  ): jsonb
  size: numeric
  status: String
  updated_at: timestamptz!
}

"""
aggregated selection of "files"
"""
type files_aggregate {
  aggregate: files_aggregate_fields
  nodes: [files!]!
}

"""
aggregate fields of "files"
"""
type files_aggregate_fields {
  avg: files_avg_fields
  count(columns: [files_select_column!], distinct: Boolean): Int!
  max: files_max_fields
  min: files_min_fields
  stddev: files_stddev_fields
  stddev_pop: files_stddev_pop_fields
  stddev_samp: files_stddev_samp_fields
  sum: files_sum_fields
  var_pop: files_var_pop_fields
  var_samp: files_var_samp_fields
  variance: files_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input files_append_input {
  metadata: jsonb
  provider_metadata: jsonb
}

"""aggregate avg on columns"""
type files_avg_fields {
  size: Float
}

"""
Boolean expression to filter rows from the table "files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp!]
  _not: files_bool_exp
  _or: [files_bool_exp!]
  content_type: String_comparison_exp
  created_at: timestamptz_comparison_exp
  creator_id: uuid_comparison_exp
  ext: String_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  name: String_comparison_exp
  path: String_comparison_exp
  provider: String_comparison_exp
  provider_metadata: jsonb_comparison_exp
  size: numeric_comparison_exp
  status: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "files"
"""
enum files_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  files_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input files_delete_at_path_input {
  metadata: [String!]
  provider_metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input files_delete_elem_input {
  metadata: Int
  provider_metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input files_delete_key_input {
  metadata: String
  provider_metadata: String
}

"""
input type for incrementing numeric columns in table "files"
"""
input files_inc_input {
  size: numeric
}

"""
input type for inserting data into table "files"
"""
input files_insert_input {
  content_type: String
  created_at: timestamptz
  creator_id: uuid
  ext: String
  id: uuid
  metadata: jsonb
  name: String
  path: String
  provider: String
  provider_metadata: jsonb
  size: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type files_max_fields {
  content_type: String
  created_at: timestamptz
  creator_id: uuid
  ext: String
  id: uuid
  name: String
  path: String
  provider: String
  size: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type files_min_fields {
  content_type: String
  created_at: timestamptz
  creator_id: uuid
  ext: String
  id: uuid
  name: String
  path: String
  provider: String
  size: numeric
  status: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "files"
"""
type files_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [files!]!
}

"""
on_conflict condition type for table "files"
"""
input files_on_conflict {
  constraint: files_constraint!
  update_columns: [files_update_column!]! = []
  where: files_bool_exp
}

"""Ordering options when selecting data from "files"."""
input files_order_by {
  content_type: order_by
  created_at: order_by
  creator_id: order_by
  ext: order_by
  id: order_by
  metadata: order_by
  name: order_by
  path: order_by
  provider: order_by
  provider_metadata: order_by
  size: order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: files"""
input files_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input files_prepend_input {
  metadata: jsonb
  provider_metadata: jsonb
}

"""
select columns of table "files"
"""
enum files_select_column {
  """column name"""
  content_type

  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  ext

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  path

  """column name"""
  provider

  """column name"""
  provider_metadata

  """column name"""
  size

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "files"
"""
input files_set_input {
  content_type: String
  created_at: timestamptz
  creator_id: uuid
  ext: String
  id: uuid
  metadata: jsonb
  name: String
  path: String
  provider: String
  provider_metadata: jsonb
  size: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type files_stddev_fields {
  size: Float
}

"""aggregate stddev_pop on columns"""
type files_stddev_pop_fields {
  size: Float
}

"""aggregate stddev_samp on columns"""
type files_stddev_samp_fields {
  size: Float
}

"""
Streaming cursor of the table "files"
"""
input files_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: files_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input files_stream_cursor_value_input {
  content_type: String
  created_at: timestamptz
  creator_id: uuid
  ext: String
  id: uuid
  metadata: jsonb
  name: String
  path: String
  provider: String
  provider_metadata: jsonb
  size: numeric
  status: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type files_sum_fields {
  size: numeric
}

"""
update columns of table "files"
"""
enum files_update_column {
  """column name"""
  content_type

  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  ext

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  name

  """column name"""
  path

  """column name"""
  provider

  """column name"""
  provider_metadata

  """column name"""
  size

  """column name"""
  status

  """column name"""
  updated_at
}

input files_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: files_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: files_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: files_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: files_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: files_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: files_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: files_set_input

  """filter the rows which have to be updated"""
  where: files_bool_exp!
}

"""aggregate var_pop on columns"""
type files_var_pop_fields {
  size: Float
}

"""aggregate var_samp on columns"""
type files_var_samp_fields {
  size: Float
}

"""aggregate variance on columns"""
type files_variance_fields {
  size: Float
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "knowledge"
"""
type knowledge {
  id: uuid!
  key: String
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  original_file_url: String
  path_history: [String!]
  source_url: String
  spider: String!
}

"""
aggregated selection of "knowledge"
"""
type knowledge_aggregate {
  aggregate: knowledge_aggregate_fields
  nodes: [knowledge!]!
}

"""
aggregate fields of "knowledge"
"""
type knowledge_aggregate_fields {
  count(columns: [knowledge_select_column!], distinct: Boolean): Int!
  max: knowledge_max_fields
  min: knowledge_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input knowledge_append_input {
  metadata: jsonb
}

"""knowledge_base"""
type knowledge_base {
  agent_id: uuid

  """An array relationship"""
  agents(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): [r_agent_kb!]!

  """An aggregate relationship"""
  agents_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): r_agent_kb_aggregate!
  base_type: knowledge_base_type_enum!
  chunking_parameters(
    """JSON select path"""
    path: String
  ): jsonb
  chunking_strategy: chunking_strategy_enum
  created_at: timestamptz!
  creator_id: uuid
  description: String!
  extraction_prompt_id: Int
  id: uuid!
  is_extraction: Boolean
  model_name: String
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "knowledge_base"
"""
type knowledge_base_aggregate {
  aggregate: knowledge_base_aggregate_fields
  nodes: [knowledge_base!]!
}

"""
aggregate fields of "knowledge_base"
"""
type knowledge_base_aggregate_fields {
  avg: knowledge_base_avg_fields
  count(columns: [knowledge_base_select_column!], distinct: Boolean): Int!
  max: knowledge_base_max_fields
  min: knowledge_base_min_fields
  stddev: knowledge_base_stddev_fields
  stddev_pop: knowledge_base_stddev_pop_fields
  stddev_samp: knowledge_base_stddev_samp_fields
  sum: knowledge_base_sum_fields
  var_pop: knowledge_base_var_pop_fields
  var_samp: knowledge_base_var_samp_fields
  variance: knowledge_base_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input knowledge_base_append_input {
  chunking_parameters: jsonb
}

"""aggregate avg on columns"""
type knowledge_base_avg_fields {
  extraction_prompt_id: Float
}

"""
Boolean expression to filter rows from the table "knowledge_base". All fields are combined with a logical 'AND'.
"""
input knowledge_base_bool_exp {
  _and: [knowledge_base_bool_exp!]
  _not: knowledge_base_bool_exp
  _or: [knowledge_base_bool_exp!]
  agent_id: uuid_comparison_exp
  agents: r_agent_kb_bool_exp
  agents_aggregate: r_agent_kb_aggregate_bool_exp
  base_type: knowledge_base_type_enum_comparison_exp
  chunking_parameters: jsonb_comparison_exp
  chunking_strategy: chunking_strategy_enum_comparison_exp
  created_at: timestamptz_comparison_exp
  creator_id: uuid_comparison_exp
  description: String_comparison_exp
  extraction_prompt_id: Int_comparison_exp
  id: uuid_comparison_exp
  is_extraction: Boolean_comparison_exp
  model_name: String_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "knowledge_base"
"""
enum knowledge_base_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  knowledge_base_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input knowledge_base_delete_at_path_input {
  chunking_parameters: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input knowledge_base_delete_elem_input {
  chunking_parameters: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input knowledge_base_delete_key_input {
  chunking_parameters: String
}

"""
input type for incrementing numeric columns in table "knowledge_base"
"""
input knowledge_base_inc_input {
  extraction_prompt_id: Int
}

"""
input type for inserting data into table "knowledge_base"
"""
input knowledge_base_insert_input {
  agent_id: uuid
  agents: r_agent_kb_arr_rel_insert_input
  base_type: knowledge_base_type_enum
  chunking_parameters: jsonb
  chunking_strategy: chunking_strategy_enum
  created_at: timestamptz
  creator_id: uuid
  description: String
  extraction_prompt_id: Int
  id: uuid
  is_extraction: Boolean
  model_name: String
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type knowledge_base_max_fields {
  agent_id: uuid
  created_at: timestamptz
  creator_id: uuid
  description: String
  extraction_prompt_id: Int
  id: uuid
  model_name: String
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type knowledge_base_min_fields {
  agent_id: uuid
  created_at: timestamptz
  creator_id: uuid
  description: String
  extraction_prompt_id: Int
  id: uuid
  model_name: String
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "knowledge_base"
"""
type knowledge_base_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [knowledge_base!]!
}

"""
input type for inserting object relation for remote table "knowledge_base"
"""
input knowledge_base_obj_rel_insert_input {
  data: knowledge_base_insert_input!

  """upsert condition"""
  on_conflict: knowledge_base_on_conflict
}

"""
on_conflict condition type for table "knowledge_base"
"""
input knowledge_base_on_conflict {
  constraint: knowledge_base_constraint!
  update_columns: [knowledge_base_update_column!]! = []
  where: knowledge_base_bool_exp
}

"""Ordering options when selecting data from "knowledge_base"."""
input knowledge_base_order_by {
  agent_id: order_by
  agents_aggregate: r_agent_kb_aggregate_order_by
  base_type: order_by
  chunking_parameters: order_by
  chunking_strategy: order_by
  created_at: order_by
  creator_id: order_by
  description: order_by
  extraction_prompt_id: order_by
  id: order_by
  is_extraction: order_by
  model_name: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: knowledge_base"""
input knowledge_base_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input knowledge_base_prepend_input {
  chunking_parameters: jsonb
}

"""
select columns of table "knowledge_base"
"""
enum knowledge_base_select_column {
  """column name"""
  agent_id

  """column name"""
  base_type

  """column name"""
  chunking_parameters

  """column name"""
  chunking_strategy

  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  description

  """column name"""
  extraction_prompt_id

  """column name"""
  id

  """column name"""
  is_extraction

  """column name"""
  model_name

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "knowledge_base"
"""
input knowledge_base_set_input {
  agent_id: uuid
  base_type: knowledge_base_type_enum
  chunking_parameters: jsonb
  chunking_strategy: chunking_strategy_enum
  created_at: timestamptz
  creator_id: uuid
  description: String
  extraction_prompt_id: Int
  id: uuid
  is_extraction: Boolean
  model_name: String
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type knowledge_base_stddev_fields {
  extraction_prompt_id: Float
}

"""aggregate stddev_pop on columns"""
type knowledge_base_stddev_pop_fields {
  extraction_prompt_id: Float
}

"""aggregate stddev_samp on columns"""
type knowledge_base_stddev_samp_fields {
  extraction_prompt_id: Float
}

"""
Streaming cursor of the table "knowledge_base"
"""
input knowledge_base_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: knowledge_base_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input knowledge_base_stream_cursor_value_input {
  agent_id: uuid
  base_type: knowledge_base_type_enum
  chunking_parameters: jsonb
  chunking_strategy: chunking_strategy_enum
  created_at: timestamptz
  creator_id: uuid
  description: String
  extraction_prompt_id: Int
  id: uuid
  is_extraction: Boolean
  model_name: String
  name: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type knowledge_base_sum_fields {
  extraction_prompt_id: Int
}

"""knowledge_base_type"""
type knowledge_base_type {
  comment: String!
  value: String!
}

"""
aggregated selection of "knowledge_base_type"
"""
type knowledge_base_type_aggregate {
  aggregate: knowledge_base_type_aggregate_fields
  nodes: [knowledge_base_type!]!
}

"""
aggregate fields of "knowledge_base_type"
"""
type knowledge_base_type_aggregate_fields {
  count(columns: [knowledge_base_type_select_column!], distinct: Boolean): Int!
  max: knowledge_base_type_max_fields
  min: knowledge_base_type_min_fields
}

"""
Boolean expression to filter rows from the table "knowledge_base_type". All fields are combined with a logical 'AND'.
"""
input knowledge_base_type_bool_exp {
  _and: [knowledge_base_type_bool_exp!]
  _not: knowledge_base_type_bool_exp
  _or: [knowledge_base_type_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "knowledge_base_type"
"""
enum knowledge_base_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  knowledge_base_type_pkey
}

enum knowledge_base_type_enum {
  """助理专属知识库"""
  AGENT

  """个人知识库"""
  PERSONAL

  """专业知识库"""
  PROFESSIONAL

  """用户助手知识库"""
  USER_AGENT
}

"""
Boolean expression to compare columns of type "knowledge_base_type_enum". All fields are combined with logical 'AND'.
"""
input knowledge_base_type_enum_comparison_exp {
  _eq: knowledge_base_type_enum
  _in: [knowledge_base_type_enum!]
  _is_null: Boolean
  _neq: knowledge_base_type_enum
  _nin: [knowledge_base_type_enum!]
}

"""
input type for inserting data into table "knowledge_base_type"
"""
input knowledge_base_type_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type knowledge_base_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type knowledge_base_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "knowledge_base_type"
"""
type knowledge_base_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [knowledge_base_type!]!
}

"""
on_conflict condition type for table "knowledge_base_type"
"""
input knowledge_base_type_on_conflict {
  constraint: knowledge_base_type_constraint!
  update_columns: [knowledge_base_type_update_column!]! = []
  where: knowledge_base_type_bool_exp
}

"""Ordering options when selecting data from "knowledge_base_type"."""
input knowledge_base_type_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: knowledge_base_type"""
input knowledge_base_type_pk_columns_input {
  value: String!
}

"""
select columns of table "knowledge_base_type"
"""
enum knowledge_base_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "knowledge_base_type"
"""
input knowledge_base_type_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "knowledge_base_type"
"""
input knowledge_base_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: knowledge_base_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input knowledge_base_type_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "knowledge_base_type"
"""
enum knowledge_base_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input knowledge_base_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: knowledge_base_type_set_input

  """filter the rows which have to be updated"""
  where: knowledge_base_type_bool_exp!
}

"""
update columns of table "knowledge_base"
"""
enum knowledge_base_update_column {
  """column name"""
  agent_id

  """column name"""
  base_type

  """column name"""
  chunking_parameters

  """column name"""
  chunking_strategy

  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  description

  """column name"""
  extraction_prompt_id

  """column name"""
  id

  """column name"""
  is_extraction

  """column name"""
  model_name

  """column name"""
  name

  """column name"""
  updated_at
}

input knowledge_base_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: knowledge_base_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: knowledge_base_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: knowledge_base_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: knowledge_base_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: knowledge_base_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: knowledge_base_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: knowledge_base_set_input

  """filter the rows which have to be updated"""
  where: knowledge_base_bool_exp!
}

"""aggregate var_pop on columns"""
type knowledge_base_var_pop_fields {
  extraction_prompt_id: Float
}

"""aggregate var_samp on columns"""
type knowledge_base_var_samp_fields {
  extraction_prompt_id: Float
}

"""aggregate variance on columns"""
type knowledge_base_variance_fields {
  extraction_prompt_id: Float
}

"""
Boolean expression to filter rows from the table "knowledge". All fields are combined with a logical 'AND'.
"""
input knowledge_bool_exp {
  _and: [knowledge_bool_exp!]
  _not: knowledge_bool_exp
  _or: [knowledge_bool_exp!]
  id: uuid_comparison_exp
  key: String_comparison_exp
  metadata: jsonb_comparison_exp
  original_file_url: String_comparison_exp
  path_history: String_array_comparison_exp
  source_url: String_comparison_exp
  spider: String_comparison_exp
}

"""
unique or primary key constraints on table "knowledge"
"""
enum knowledge_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  knowledge_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input knowledge_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input knowledge_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input knowledge_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "knowledge"
"""
input knowledge_insert_input {
  id: uuid
  key: String
  metadata: jsonb
  original_file_url: String
  path_history: [String!]
  source_url: String
  spider: String
}

"""aggregate max on columns"""
type knowledge_max_fields {
  id: uuid
  key: String
  original_file_url: String
  path_history: [String!]
  source_url: String
  spider: String
}

"""aggregate min on columns"""
type knowledge_min_fields {
  id: uuid
  key: String
  original_file_url: String
  path_history: [String!]
  source_url: String
  spider: String
}

"""
response of any mutation on the table "knowledge"
"""
type knowledge_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [knowledge!]!
}

"""
on_conflict condition type for table "knowledge"
"""
input knowledge_on_conflict {
  constraint: knowledge_constraint!
  update_columns: [knowledge_update_column!]! = []
  where: knowledge_bool_exp
}

"""Ordering options when selecting data from "knowledge"."""
input knowledge_order_by {
  id: order_by
  key: order_by
  metadata: order_by
  original_file_url: order_by
  path_history: order_by
  source_url: order_by
  spider: order_by
}

"""primary key columns input for table: knowledge"""
input knowledge_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input knowledge_prepend_input {
  metadata: jsonb
}

"""
select columns of table "knowledge"
"""
enum knowledge_select_column {
  """column name"""
  id

  """column name"""
  key

  """column name"""
  metadata

  """column name"""
  original_file_url

  """column name"""
  path_history

  """column name"""
  source_url

  """column name"""
  spider
}

"""
input type for updating data in table "knowledge"
"""
input knowledge_set_input {
  id: uuid
  key: String
  metadata: jsonb
  original_file_url: String
  path_history: [String!]
  source_url: String
  spider: String
}

"""
Streaming cursor of the table "knowledge"
"""
input knowledge_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: knowledge_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input knowledge_stream_cursor_value_input {
  id: uuid
  key: String
  metadata: jsonb
  original_file_url: String
  path_history: [String!]
  source_url: String
  spider: String
}

"""
update columns of table "knowledge"
"""
enum knowledge_update_column {
  """column name"""
  id

  """column name"""
  key

  """column name"""
  metadata

  """column name"""
  original_file_url

  """column name"""
  path_history

  """column name"""
  source_url

  """column name"""
  spider
}

input knowledge_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: knowledge_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: knowledge_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: knowledge_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: knowledge_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: knowledge_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: knowledge_set_input

  """filter the rows which have to be updated"""
  where: knowledge_bool_exp!
}

"""message"""
type message {
  attachments(
    """JSON select path"""
    path: String
  ): jsonb
  content: String
  created_at: timestamptz
  feedback: message_feedback_enum
  id: uuid!
  role: message_role_enum!
  session_id: uuid
  status: message_status_enum
  updated_at: timestamptz
}

"""
aggregated selection of "message"
"""
type message_aggregate {
  aggregate: message_aggregate_fields
  nodes: [message!]!
}

"""
aggregate fields of "message"
"""
type message_aggregate_fields {
  count(columns: [message_select_column!], distinct: Boolean): Int!
  max: message_max_fields
  min: message_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input message_append_input {
  attachments: jsonb
}

"""
Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'.
"""
input message_bool_exp {
  _and: [message_bool_exp!]
  _not: message_bool_exp
  _or: [message_bool_exp!]
  attachments: jsonb_comparison_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  feedback: message_feedback_enum_comparison_exp
  id: uuid_comparison_exp
  role: message_role_enum_comparison_exp
  session_id: uuid_comparison_exp
  status: message_status_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "message"
"""
enum message_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  message_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input message_delete_at_path_input {
  attachments: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input message_delete_elem_input {
  attachments: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input message_delete_key_input {
  attachments: String
}

"""message_feedback"""
type message_feedback {
  comment: String!
  value: String!
}

"""
aggregated selection of "message_feedback"
"""
type message_feedback_aggregate {
  aggregate: message_feedback_aggregate_fields
  nodes: [message_feedback!]!
}

"""
aggregate fields of "message_feedback"
"""
type message_feedback_aggregate_fields {
  count(columns: [message_feedback_select_column!], distinct: Boolean): Int!
  max: message_feedback_max_fields
  min: message_feedback_min_fields
}

"""
Boolean expression to filter rows from the table "message_feedback". All fields are combined with a logical 'AND'.
"""
input message_feedback_bool_exp {
  _and: [message_feedback_bool_exp!]
  _not: message_feedback_bool_exp
  _or: [message_feedback_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "message_feedback"
"""
enum message_feedback_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  message_feedback_pkey
}

enum message_feedback_enum {
  """dislike"""
  dislike

  """like"""
  like
}

"""
Boolean expression to compare columns of type "message_feedback_enum". All fields are combined with logical 'AND'.
"""
input message_feedback_enum_comparison_exp {
  _eq: message_feedback_enum
  _in: [message_feedback_enum!]
  _is_null: Boolean
  _neq: message_feedback_enum
  _nin: [message_feedback_enum!]
}

"""
input type for inserting data into table "message_feedback"
"""
input message_feedback_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type message_feedback_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type message_feedback_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "message_feedback"
"""
type message_feedback_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message_feedback!]!
}

"""
on_conflict condition type for table "message_feedback"
"""
input message_feedback_on_conflict {
  constraint: message_feedback_constraint!
  update_columns: [message_feedback_update_column!]! = []
  where: message_feedback_bool_exp
}

"""Ordering options when selecting data from "message_feedback"."""
input message_feedback_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: message_feedback"""
input message_feedback_pk_columns_input {
  value: String!
}

"""
select columns of table "message_feedback"
"""
enum message_feedback_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "message_feedback"
"""
input message_feedback_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "message_feedback"
"""
input message_feedback_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: message_feedback_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input message_feedback_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "message_feedback"
"""
enum message_feedback_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input message_feedback_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: message_feedback_set_input

  """filter the rows which have to be updated"""
  where: message_feedback_bool_exp!
}

"""
input type for inserting data into table "message"
"""
input message_insert_input {
  attachments: jsonb
  content: String
  created_at: timestamptz
  feedback: message_feedback_enum
  id: uuid
  role: message_role_enum
  session_id: uuid
  status: message_status_enum
  updated_at: timestamptz
}

"""aggregate max on columns"""
type message_max_fields {
  content: String
  created_at: timestamptz
  id: uuid
  session_id: uuid
  updated_at: timestamptz
}

"""aggregate min on columns"""
type message_min_fields {
  content: String
  created_at: timestamptz
  id: uuid
  session_id: uuid
  updated_at: timestamptz
}

"""
response of any mutation on the table "message"
"""
type message_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message!]!
}

"""
on_conflict condition type for table "message"
"""
input message_on_conflict {
  constraint: message_constraint!
  update_columns: [message_update_column!]! = []
  where: message_bool_exp
}

"""Ordering options when selecting data from "message"."""
input message_order_by {
  attachments: order_by
  content: order_by
  created_at: order_by
  feedback: order_by
  id: order_by
  role: order_by
  session_id: order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: message"""
input message_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input message_prepend_input {
  attachments: jsonb
}

"""message_role"""
type message_role {
  comment: String!
  value: String!
}

"""
aggregated selection of "message_role"
"""
type message_role_aggregate {
  aggregate: message_role_aggregate_fields
  nodes: [message_role!]!
}

"""
aggregate fields of "message_role"
"""
type message_role_aggregate_fields {
  count(columns: [message_role_select_column!], distinct: Boolean): Int!
  max: message_role_max_fields
  min: message_role_min_fields
}

"""
Boolean expression to filter rows from the table "message_role". All fields are combined with a logical 'AND'.
"""
input message_role_bool_exp {
  _and: [message_role_bool_exp!]
  _not: message_role_bool_exp
  _or: [message_role_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "message_role"
"""
enum message_role_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  message_role_pkey
}

enum message_role_enum {
  """assistant"""
  assistant

  """system"""
  system

  """user"""
  user
}

"""
Boolean expression to compare columns of type "message_role_enum". All fields are combined with logical 'AND'.
"""
input message_role_enum_comparison_exp {
  _eq: message_role_enum
  _in: [message_role_enum!]
  _is_null: Boolean
  _neq: message_role_enum
  _nin: [message_role_enum!]
}

"""
input type for inserting data into table "message_role"
"""
input message_role_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type message_role_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type message_role_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "message_role"
"""
type message_role_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message_role!]!
}

"""
on_conflict condition type for table "message_role"
"""
input message_role_on_conflict {
  constraint: message_role_constraint!
  update_columns: [message_role_update_column!]! = []
  where: message_role_bool_exp
}

"""Ordering options when selecting data from "message_role"."""
input message_role_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: message_role"""
input message_role_pk_columns_input {
  value: String!
}

"""
select columns of table "message_role"
"""
enum message_role_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "message_role"
"""
input message_role_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "message_role"
"""
input message_role_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: message_role_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input message_role_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "message_role"
"""
enum message_role_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input message_role_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: message_role_set_input

  """filter the rows which have to be updated"""
  where: message_role_bool_exp!
}

"""
select columns of table "message"
"""
enum message_select_column {
  """column name"""
  attachments

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  feedback

  """column name"""
  id

  """column name"""
  role

  """column name"""
  session_id

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "message"
"""
input message_set_input {
  attachments: jsonb
  content: String
  created_at: timestamptz
  feedback: message_feedback_enum
  id: uuid
  role: message_role_enum
  session_id: uuid
  status: message_status_enum
  updated_at: timestamptz
}

"""message_status"""
type message_status {
  comment: String!
  value: String!
}

"""
aggregated selection of "message_status"
"""
type message_status_aggregate {
  aggregate: message_status_aggregate_fields
  nodes: [message_status!]!
}

"""
aggregate fields of "message_status"
"""
type message_status_aggregate_fields {
  count(columns: [message_status_select_column!], distinct: Boolean): Int!
  max: message_status_max_fields
  min: message_status_min_fields
}

"""
Boolean expression to filter rows from the table "message_status". All fields are combined with a logical 'AND'.
"""
input message_status_bool_exp {
  _and: [message_status_bool_exp!]
  _not: message_status_bool_exp
  _or: [message_status_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "message_status"
"""
enum message_status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  message_status_pkey
}

enum message_status_enum {
  """failed"""
  failed

  """success"""
  success
}

"""
Boolean expression to compare columns of type "message_status_enum". All fields are combined with logical 'AND'.
"""
input message_status_enum_comparison_exp {
  _eq: message_status_enum
  _in: [message_status_enum!]
  _is_null: Boolean
  _neq: message_status_enum
  _nin: [message_status_enum!]
}

"""
input type for inserting data into table "message_status"
"""
input message_status_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type message_status_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type message_status_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "message_status"
"""
type message_status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [message_status!]!
}

"""
on_conflict condition type for table "message_status"
"""
input message_status_on_conflict {
  constraint: message_status_constraint!
  update_columns: [message_status_update_column!]! = []
  where: message_status_bool_exp
}

"""Ordering options when selecting data from "message_status"."""
input message_status_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: message_status"""
input message_status_pk_columns_input {
  value: String!
}

"""
select columns of table "message_status"
"""
enum message_status_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "message_status"
"""
input message_status_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "message_status"
"""
input message_status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: message_status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input message_status_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "message_status"
"""
enum message_status_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input message_status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: message_status_set_input

  """filter the rows which have to be updated"""
  where: message_status_bool_exp!
}

"""
Streaming cursor of the table "message"
"""
input message_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: message_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input message_stream_cursor_value_input {
  attachments: jsonb
  content: String
  created_at: timestamptz
  feedback: message_feedback_enum
  id: uuid
  role: message_role_enum
  session_id: uuid
  status: message_status_enum
  updated_at: timestamptz
}

"""
update columns of table "message"
"""
enum message_update_column {
  """column name"""
  attachments

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  feedback

  """column name"""
  id

  """column name"""
  role

  """column name"""
  session_id

  """column name"""
  status

  """column name"""
  updated_at
}

input message_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: message_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: message_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: message_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: message_delete_key_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: message_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: message_set_input

  """filter the rows which have to be updated"""
  where: message_bool_exp!
}

"""multimodal_data"""
type multimodal_data {
  bucket: String
  content: String
  end_time: Int
  file_key: String
  id: uuid!
  is_chunk: Boolean
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  start_time: Int
  title: String
  topic: [String!]
  type: String!
}

"""
aggregated selection of "multimodal_data"
"""
type multimodal_data_aggregate {
  aggregate: multimodal_data_aggregate_fields
  nodes: [multimodal_data!]!
}

"""
aggregate fields of "multimodal_data"
"""
type multimodal_data_aggregate_fields {
  avg: multimodal_data_avg_fields
  count(columns: [multimodal_data_select_column!], distinct: Boolean): Int!
  max: multimodal_data_max_fields
  min: multimodal_data_min_fields
  stddev: multimodal_data_stddev_fields
  stddev_pop: multimodal_data_stddev_pop_fields
  stddev_samp: multimodal_data_stddev_samp_fields
  sum: multimodal_data_sum_fields
  var_pop: multimodal_data_var_pop_fields
  var_samp: multimodal_data_var_samp_fields
  variance: multimodal_data_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input multimodal_data_append_input {
  metadata: jsonb
}

"""aggregate avg on columns"""
type multimodal_data_avg_fields {
  end_time: Float
  start_time: Float
}

"""
Boolean expression to filter rows from the table "multimodal_data". All fields are combined with a logical 'AND'.
"""
input multimodal_data_bool_exp {
  _and: [multimodal_data_bool_exp!]
  _not: multimodal_data_bool_exp
  _or: [multimodal_data_bool_exp!]
  bucket: String_comparison_exp
  content: String_comparison_exp
  end_time: Int_comparison_exp
  file_key: String_comparison_exp
  id: uuid_comparison_exp
  is_chunk: Boolean_comparison_exp
  metadata: jsonb_comparison_exp
  start_time: Int_comparison_exp
  title: String_comparison_exp
  topic: String_array_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "multimodal_data"
"""
enum multimodal_data_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  multimodal_data_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input multimodal_data_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input multimodal_data_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input multimodal_data_delete_key_input {
  metadata: String
}

"""
input type for incrementing numeric columns in table "multimodal_data"
"""
input multimodal_data_inc_input {
  end_time: Int
  start_time: Int
}

"""
input type for inserting data into table "multimodal_data"
"""
input multimodal_data_insert_input {
  bucket: String
  content: String
  end_time: Int
  file_key: String
  id: uuid
  is_chunk: Boolean
  metadata: jsonb
  start_time: Int
  title: String
  topic: [String!]
  type: String
}

"""aggregate max on columns"""
type multimodal_data_max_fields {
  bucket: String
  content: String
  end_time: Int
  file_key: String
  id: uuid
  start_time: Int
  title: String
  topic: [String!]
  type: String
}

"""aggregate min on columns"""
type multimodal_data_min_fields {
  bucket: String
  content: String
  end_time: Int
  file_key: String
  id: uuid
  start_time: Int
  title: String
  topic: [String!]
  type: String
}

"""
response of any mutation on the table "multimodal_data"
"""
type multimodal_data_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [multimodal_data!]!
}

"""
on_conflict condition type for table "multimodal_data"
"""
input multimodal_data_on_conflict {
  constraint: multimodal_data_constraint!
  update_columns: [multimodal_data_update_column!]! = []
  where: multimodal_data_bool_exp
}

"""Ordering options when selecting data from "multimodal_data"."""
input multimodal_data_order_by {
  bucket: order_by
  content: order_by
  end_time: order_by
  file_key: order_by
  id: order_by
  is_chunk: order_by
  metadata: order_by
  start_time: order_by
  title: order_by
  topic: order_by
  type: order_by
}

"""primary key columns input for table: multimodal_data"""
input multimodal_data_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input multimodal_data_prepend_input {
  metadata: jsonb
}

"""
select columns of table "multimodal_data"
"""
enum multimodal_data_select_column {
  """column name"""
  bucket

  """column name"""
  content

  """column name"""
  end_time

  """column name"""
  file_key

  """column name"""
  id

  """column name"""
  is_chunk

  """column name"""
  metadata

  """column name"""
  start_time

  """column name"""
  title

  """column name"""
  topic

  """column name"""
  type
}

"""
input type for updating data in table "multimodal_data"
"""
input multimodal_data_set_input {
  bucket: String
  content: String
  end_time: Int
  file_key: String
  id: uuid
  is_chunk: Boolean
  metadata: jsonb
  start_time: Int
  title: String
  topic: [String!]
  type: String
}

"""aggregate stddev on columns"""
type multimodal_data_stddev_fields {
  end_time: Float
  start_time: Float
}

"""aggregate stddev_pop on columns"""
type multimodal_data_stddev_pop_fields {
  end_time: Float
  start_time: Float
}

"""aggregate stddev_samp on columns"""
type multimodal_data_stddev_samp_fields {
  end_time: Float
  start_time: Float
}

"""
Streaming cursor of the table "multimodal_data"
"""
input multimodal_data_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: multimodal_data_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input multimodal_data_stream_cursor_value_input {
  bucket: String
  content: String
  end_time: Int
  file_key: String
  id: uuid
  is_chunk: Boolean
  metadata: jsonb
  start_time: Int
  title: String
  topic: [String!]
  type: String
}

"""aggregate sum on columns"""
type multimodal_data_sum_fields {
  end_time: Int
  start_time: Int
}

"""
update columns of table "multimodal_data"
"""
enum multimodal_data_update_column {
  """column name"""
  bucket

  """column name"""
  content

  """column name"""
  end_time

  """column name"""
  file_key

  """column name"""
  id

  """column name"""
  is_chunk

  """column name"""
  metadata

  """column name"""
  start_time

  """column name"""
  title

  """column name"""
  topic

  """column name"""
  type
}

input multimodal_data_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: multimodal_data_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: multimodal_data_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: multimodal_data_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: multimodal_data_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: multimodal_data_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: multimodal_data_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: multimodal_data_set_input

  """filter the rows which have to be updated"""
  where: multimodal_data_bool_exp!
}

"""aggregate var_pop on columns"""
type multimodal_data_var_pop_fields {
  end_time: Float
  start_time: Float
}

"""aggregate var_samp on columns"""
type multimodal_data_var_samp_fields {
  end_time: Float
  start_time: Float
}

"""aggregate variance on columns"""
type multimodal_data_variance_fields {
  end_time: Float
  start_time: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "accounts"
  """
  delete_accounts(
    """filter the rows which have to be deleted"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  delete single row from the table: "accounts"
  """
  delete_accounts_by_pk(id: uuid!): accounts

  """
  delete data from the table: "agent"
  """
  delete_agent(
    """filter the rows which have to be deleted"""
    where: agent_bool_exp!
  ): agent_mutation_response

  """
  delete single row from the table: "agent"
  """
  delete_agent_by_pk(id: uuid!): agent

  """
  delete data from the table: "agent_type"
  """
  delete_agent_type(
    """filter the rows which have to be deleted"""
    where: agent_type_bool_exp!
  ): agent_type_mutation_response

  """
  delete single row from the table: "agent_type"
  """
  delete_agent_type_by_pk(id: Int!): agent_type

  """
  delete data from the table: "chunking_strategy"
  """
  delete_chunking_strategy(
    """filter the rows which have to be deleted"""
    where: chunking_strategy_bool_exp!
  ): chunking_strategy_mutation_response

  """
  delete single row from the table: "chunking_strategy"
  """
  delete_chunking_strategy_by_pk(value: String!): chunking_strategy

  """
  delete data from the table: "files"
  """
  delete_files(
    """filter the rows which have to be deleted"""
    where: files_bool_exp!
  ): files_mutation_response

  """
  delete single row from the table: "files"
  """
  delete_files_by_pk(id: uuid!): files

  """
  delete data from the table: "knowledge"
  """
  delete_knowledge(
    """filter the rows which have to be deleted"""
    where: knowledge_bool_exp!
  ): knowledge_mutation_response

  """
  delete data from the table: "knowledge_base"
  """
  delete_knowledge_base(
    """filter the rows which have to be deleted"""
    where: knowledge_base_bool_exp!
  ): knowledge_base_mutation_response

  """
  delete single row from the table: "knowledge_base"
  """
  delete_knowledge_base_by_pk(id: uuid!): knowledge_base

  """
  delete data from the table: "knowledge_base_type"
  """
  delete_knowledge_base_type(
    """filter the rows which have to be deleted"""
    where: knowledge_base_type_bool_exp!
  ): knowledge_base_type_mutation_response

  """
  delete single row from the table: "knowledge_base_type"
  """
  delete_knowledge_base_type_by_pk(value: String!): knowledge_base_type

  """
  delete single row from the table: "knowledge"
  """
  delete_knowledge_by_pk(id: uuid!): knowledge

  """
  delete data from the table: "message"
  """
  delete_message(
    """filter the rows which have to be deleted"""
    where: message_bool_exp!
  ): message_mutation_response

  """
  delete single row from the table: "message"
  """
  delete_message_by_pk(id: uuid!): message

  """
  delete data from the table: "message_feedback"
  """
  delete_message_feedback(
    """filter the rows which have to be deleted"""
    where: message_feedback_bool_exp!
  ): message_feedback_mutation_response

  """
  delete single row from the table: "message_feedback"
  """
  delete_message_feedback_by_pk(value: String!): message_feedback

  """
  delete data from the table: "message_role"
  """
  delete_message_role(
    """filter the rows which have to be deleted"""
    where: message_role_bool_exp!
  ): message_role_mutation_response

  """
  delete single row from the table: "message_role"
  """
  delete_message_role_by_pk(value: String!): message_role

  """
  delete data from the table: "message_status"
  """
  delete_message_status(
    """filter the rows which have to be deleted"""
    where: message_status_bool_exp!
  ): message_status_mutation_response

  """
  delete single row from the table: "message_status"
  """
  delete_message_status_by_pk(value: String!): message_status

  """
  delete data from the table: "multimodal_data"
  """
  delete_multimodal_data(
    """filter the rows which have to be deleted"""
    where: multimodal_data_bool_exp!
  ): multimodal_data_mutation_response

  """
  delete single row from the table: "multimodal_data"
  """
  delete_multimodal_data_by_pk(id: uuid!): multimodal_data

  """
  delete data from the table: "prompt_hub"
  """
  delete_prompt_hub(
    """filter the rows which have to be deleted"""
    where: prompt_hub_bool_exp!
  ): prompt_hub_mutation_response

  """
  delete single row from the table: "prompt_hub"
  """
  delete_prompt_hub_by_pk(id: Int!): prompt_hub

  """
  delete data from the table: "prompt_template"
  """
  delete_prompt_template(
    """filter the rows which have to be deleted"""
    where: prompt_template_bool_exp!
  ): prompt_template_mutation_response

  """
  delete single row from the table: "prompt_template"
  """
  delete_prompt_template_by_pk(id: Int!): prompt_template

  """
  delete data from the table: "provider_type"
  """
  delete_provider_type(
    """filter the rows which have to be deleted"""
    where: provider_type_bool_exp!
  ): provider_type_mutation_response

  """
  delete single row from the table: "provider_type"
  """
  delete_provider_type_by_pk(value: String!): provider_type

  """
  delete data from the table: "r_agent_kb"
  """
  delete_r_agent_kb(
    """filter the rows which have to be deleted"""
    where: r_agent_kb_bool_exp!
  ): r_agent_kb_mutation_response

  """
  delete single row from the table: "r_agent_kb"
  """
  delete_r_agent_kb_by_pk(id: Int!): r_agent_kb

  """
  delete data from the table: "r_agent_user"
  """
  delete_r_agent_user(
    """filter the rows which have to be deleted"""
    where: r_agent_user_bool_exp!
  ): r_agent_user_mutation_response

  """
  delete single row from the table: "r_agent_user"
  """
  delete_r_agent_user_by_pk(id: Int!): r_agent_user

  """
  delete data from the table: "r_kb_user"
  """
  delete_r_kb_user(
    """filter the rows which have to be deleted"""
    where: r_kb_user_bool_exp!
  ): r_kb_user_mutation_response

  """
  delete single row from the table: "r_kb_user"
  """
  delete_r_kb_user_by_pk(id: Int!): r_kb_user

  """
  delete data from the table: "role"
  """
  delete_role(
    """filter the rows which have to be deleted"""
    where: role_bool_exp!
  ): role_mutation_response

  """
  delete single row from the table: "role"
  """
  delete_role_by_pk(value: String!): role

  """
  delete data from the table: "sessions"
  """
  delete_sessions(
    """filter the rows which have to be deleted"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  delete single row from the table: "sessions"
  """
  delete_sessions_by_pk(sessionToken: String!): sessions

  """
  delete data from the table: "spider"
  """
  delete_spider(
    """filter the rows which have to be deleted"""
    where: spider_bool_exp!
  ): spider_mutation_response

  """
  delete single row from the table: "spider"
  """
  delete_spider_by_pk(id: uuid!): spider

  """
  delete data from the table: "status"
  """
  delete_status(
    """filter the rows which have to be deleted"""
    where: status_bool_exp!
  ): status_mutation_response

  """
  delete single row from the table: "status"
  """
  delete_status_by_pk(value: String!): status

  """
  delete data from the table: "topic_history"
  """
  delete_topic_history(
    """filter the rows which have to be deleted"""
    where: topic_history_bool_exp!
  ): topic_history_mutation_response

  """
  delete single row from the table: "topic_history"
  """
  delete_topic_history_by_pk(id: uuid!): topic_history

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: uuid!): users

  """
  delete data from the table: "verification_tokens"
  """
  delete_verification_tokens(
    """filter the rows which have to be deleted"""
    where: verification_tokens_bool_exp!
  ): verification_tokens_mutation_response

  """
  delete single row from the table: "verification_tokens"
  """
  delete_verification_tokens_by_pk(token: String!): verification_tokens

  """
  insert data into the table: "accounts"
  """
  insert_accounts(
    """the rows to be inserted"""
    objects: [accounts_insert_input!]!

    """upsert condition"""
    on_conflict: accounts_on_conflict
  ): accounts_mutation_response

  """
  insert a single row into the table: "accounts"
  """
  insert_accounts_one(
    """the row to be inserted"""
    object: accounts_insert_input!

    """upsert condition"""
    on_conflict: accounts_on_conflict
  ): accounts

  """
  insert data into the table: "agent"
  """
  insert_agent(
    """the rows to be inserted"""
    objects: [agent_insert_input!]!

    """upsert condition"""
    on_conflict: agent_on_conflict
  ): agent_mutation_response

  """
  insert a single row into the table: "agent"
  """
  insert_agent_one(
    """the row to be inserted"""
    object: agent_insert_input!

    """upsert condition"""
    on_conflict: agent_on_conflict
  ): agent

  """
  insert data into the table: "agent_type"
  """
  insert_agent_type(
    """the rows to be inserted"""
    objects: [agent_type_insert_input!]!

    """upsert condition"""
    on_conflict: agent_type_on_conflict
  ): agent_type_mutation_response

  """
  insert a single row into the table: "agent_type"
  """
  insert_agent_type_one(
    """the row to be inserted"""
    object: agent_type_insert_input!

    """upsert condition"""
    on_conflict: agent_type_on_conflict
  ): agent_type

  """
  insert data into the table: "chunking_strategy"
  """
  insert_chunking_strategy(
    """the rows to be inserted"""
    objects: [chunking_strategy_insert_input!]!

    """upsert condition"""
    on_conflict: chunking_strategy_on_conflict
  ): chunking_strategy_mutation_response

  """
  insert a single row into the table: "chunking_strategy"
  """
  insert_chunking_strategy_one(
    """the row to be inserted"""
    object: chunking_strategy_insert_input!

    """upsert condition"""
    on_conflict: chunking_strategy_on_conflict
  ): chunking_strategy

  """
  insert data into the table: "files"
  """
  insert_files(
    """the rows to be inserted"""
    objects: [files_insert_input!]!

    """upsert condition"""
    on_conflict: files_on_conflict
  ): files_mutation_response

  """
  insert a single row into the table: "files"
  """
  insert_files_one(
    """the row to be inserted"""
    object: files_insert_input!

    """upsert condition"""
    on_conflict: files_on_conflict
  ): files

  """
  insert data into the table: "knowledge"
  """
  insert_knowledge(
    """the rows to be inserted"""
    objects: [knowledge_insert_input!]!

    """upsert condition"""
    on_conflict: knowledge_on_conflict
  ): knowledge_mutation_response

  """
  insert data into the table: "knowledge_base"
  """
  insert_knowledge_base(
    """the rows to be inserted"""
    objects: [knowledge_base_insert_input!]!

    """upsert condition"""
    on_conflict: knowledge_base_on_conflict
  ): knowledge_base_mutation_response

  """
  insert a single row into the table: "knowledge_base"
  """
  insert_knowledge_base_one(
    """the row to be inserted"""
    object: knowledge_base_insert_input!

    """upsert condition"""
    on_conflict: knowledge_base_on_conflict
  ): knowledge_base

  """
  insert data into the table: "knowledge_base_type"
  """
  insert_knowledge_base_type(
    """the rows to be inserted"""
    objects: [knowledge_base_type_insert_input!]!

    """upsert condition"""
    on_conflict: knowledge_base_type_on_conflict
  ): knowledge_base_type_mutation_response

  """
  insert a single row into the table: "knowledge_base_type"
  """
  insert_knowledge_base_type_one(
    """the row to be inserted"""
    object: knowledge_base_type_insert_input!

    """upsert condition"""
    on_conflict: knowledge_base_type_on_conflict
  ): knowledge_base_type

  """
  insert a single row into the table: "knowledge"
  """
  insert_knowledge_one(
    """the row to be inserted"""
    object: knowledge_insert_input!

    """upsert condition"""
    on_conflict: knowledge_on_conflict
  ): knowledge

  """
  insert data into the table: "message"
  """
  insert_message(
    """the rows to be inserted"""
    objects: [message_insert_input!]!

    """upsert condition"""
    on_conflict: message_on_conflict
  ): message_mutation_response

  """
  insert data into the table: "message_feedback"
  """
  insert_message_feedback(
    """the rows to be inserted"""
    objects: [message_feedback_insert_input!]!

    """upsert condition"""
    on_conflict: message_feedback_on_conflict
  ): message_feedback_mutation_response

  """
  insert a single row into the table: "message_feedback"
  """
  insert_message_feedback_one(
    """the row to be inserted"""
    object: message_feedback_insert_input!

    """upsert condition"""
    on_conflict: message_feedback_on_conflict
  ): message_feedback

  """
  insert a single row into the table: "message"
  """
  insert_message_one(
    """the row to be inserted"""
    object: message_insert_input!

    """upsert condition"""
    on_conflict: message_on_conflict
  ): message

  """
  insert data into the table: "message_role"
  """
  insert_message_role(
    """the rows to be inserted"""
    objects: [message_role_insert_input!]!

    """upsert condition"""
    on_conflict: message_role_on_conflict
  ): message_role_mutation_response

  """
  insert a single row into the table: "message_role"
  """
  insert_message_role_one(
    """the row to be inserted"""
    object: message_role_insert_input!

    """upsert condition"""
    on_conflict: message_role_on_conflict
  ): message_role

  """
  insert data into the table: "message_status"
  """
  insert_message_status(
    """the rows to be inserted"""
    objects: [message_status_insert_input!]!

    """upsert condition"""
    on_conflict: message_status_on_conflict
  ): message_status_mutation_response

  """
  insert a single row into the table: "message_status"
  """
  insert_message_status_one(
    """the row to be inserted"""
    object: message_status_insert_input!

    """upsert condition"""
    on_conflict: message_status_on_conflict
  ): message_status

  """
  insert data into the table: "multimodal_data"
  """
  insert_multimodal_data(
    """the rows to be inserted"""
    objects: [multimodal_data_insert_input!]!

    """upsert condition"""
    on_conflict: multimodal_data_on_conflict
  ): multimodal_data_mutation_response

  """
  insert a single row into the table: "multimodal_data"
  """
  insert_multimodal_data_one(
    """the row to be inserted"""
    object: multimodal_data_insert_input!

    """upsert condition"""
    on_conflict: multimodal_data_on_conflict
  ): multimodal_data

  """
  insert data into the table: "prompt_hub"
  """
  insert_prompt_hub(
    """the rows to be inserted"""
    objects: [prompt_hub_insert_input!]!

    """upsert condition"""
    on_conflict: prompt_hub_on_conflict
  ): prompt_hub_mutation_response

  """
  insert a single row into the table: "prompt_hub"
  """
  insert_prompt_hub_one(
    """the row to be inserted"""
    object: prompt_hub_insert_input!

    """upsert condition"""
    on_conflict: prompt_hub_on_conflict
  ): prompt_hub

  """
  insert data into the table: "prompt_template"
  """
  insert_prompt_template(
    """the rows to be inserted"""
    objects: [prompt_template_insert_input!]!

    """upsert condition"""
    on_conflict: prompt_template_on_conflict
  ): prompt_template_mutation_response

  """
  insert a single row into the table: "prompt_template"
  """
  insert_prompt_template_one(
    """the row to be inserted"""
    object: prompt_template_insert_input!

    """upsert condition"""
    on_conflict: prompt_template_on_conflict
  ): prompt_template

  """
  insert data into the table: "provider_type"
  """
  insert_provider_type(
    """the rows to be inserted"""
    objects: [provider_type_insert_input!]!

    """upsert condition"""
    on_conflict: provider_type_on_conflict
  ): provider_type_mutation_response

  """
  insert a single row into the table: "provider_type"
  """
  insert_provider_type_one(
    """the row to be inserted"""
    object: provider_type_insert_input!

    """upsert condition"""
    on_conflict: provider_type_on_conflict
  ): provider_type

  """
  insert data into the table: "r_agent_kb"
  """
  insert_r_agent_kb(
    """the rows to be inserted"""
    objects: [r_agent_kb_insert_input!]!

    """upsert condition"""
    on_conflict: r_agent_kb_on_conflict
  ): r_agent_kb_mutation_response

  """
  insert a single row into the table: "r_agent_kb"
  """
  insert_r_agent_kb_one(
    """the row to be inserted"""
    object: r_agent_kb_insert_input!

    """upsert condition"""
    on_conflict: r_agent_kb_on_conflict
  ): r_agent_kb

  """
  insert data into the table: "r_agent_user"
  """
  insert_r_agent_user(
    """the rows to be inserted"""
    objects: [r_agent_user_insert_input!]!

    """upsert condition"""
    on_conflict: r_agent_user_on_conflict
  ): r_agent_user_mutation_response

  """
  insert a single row into the table: "r_agent_user"
  """
  insert_r_agent_user_one(
    """the row to be inserted"""
    object: r_agent_user_insert_input!

    """upsert condition"""
    on_conflict: r_agent_user_on_conflict
  ): r_agent_user

  """
  insert data into the table: "r_kb_user"
  """
  insert_r_kb_user(
    """the rows to be inserted"""
    objects: [r_kb_user_insert_input!]!

    """upsert condition"""
    on_conflict: r_kb_user_on_conflict
  ): r_kb_user_mutation_response

  """
  insert a single row into the table: "r_kb_user"
  """
  insert_r_kb_user_one(
    """the row to be inserted"""
    object: r_kb_user_insert_input!

    """upsert condition"""
    on_conflict: r_kb_user_on_conflict
  ): r_kb_user

  """
  insert data into the table: "role"
  """
  insert_role(
    """the rows to be inserted"""
    objects: [role_insert_input!]!

    """upsert condition"""
    on_conflict: role_on_conflict
  ): role_mutation_response

  """
  insert a single row into the table: "role"
  """
  insert_role_one(
    """the row to be inserted"""
    object: role_insert_input!

    """upsert condition"""
    on_conflict: role_on_conflict
  ): role

  """
  insert data into the table: "sessions"
  """
  insert_sessions(
    """the rows to be inserted"""
    objects: [sessions_insert_input!]!

    """upsert condition"""
    on_conflict: sessions_on_conflict
  ): sessions_mutation_response

  """
  insert a single row into the table: "sessions"
  """
  insert_sessions_one(
    """the row to be inserted"""
    object: sessions_insert_input!

    """upsert condition"""
    on_conflict: sessions_on_conflict
  ): sessions

  """
  insert data into the table: "spider"
  """
  insert_spider(
    """the rows to be inserted"""
    objects: [spider_insert_input!]!

    """upsert condition"""
    on_conflict: spider_on_conflict
  ): spider_mutation_response

  """
  insert a single row into the table: "spider"
  """
  insert_spider_one(
    """the row to be inserted"""
    object: spider_insert_input!

    """upsert condition"""
    on_conflict: spider_on_conflict
  ): spider

  """
  insert data into the table: "status"
  """
  insert_status(
    """the rows to be inserted"""
    objects: [status_insert_input!]!

    """upsert condition"""
    on_conflict: status_on_conflict
  ): status_mutation_response

  """
  insert a single row into the table: "status"
  """
  insert_status_one(
    """the row to be inserted"""
    object: status_insert_input!

    """upsert condition"""
    on_conflict: status_on_conflict
  ): status

  """
  insert data into the table: "topic_history"
  """
  insert_topic_history(
    """the rows to be inserted"""
    objects: [topic_history_insert_input!]!

    """upsert condition"""
    on_conflict: topic_history_on_conflict
  ): topic_history_mutation_response

  """
  insert a single row into the table: "topic_history"
  """
  insert_topic_history_one(
    """the row to be inserted"""
    object: topic_history_insert_input!

    """upsert condition"""
    on_conflict: topic_history_on_conflict
  ): topic_history

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "verification_tokens"
  """
  insert_verification_tokens(
    """the rows to be inserted"""
    objects: [verification_tokens_insert_input!]!

    """upsert condition"""
    on_conflict: verification_tokens_on_conflict
  ): verification_tokens_mutation_response

  """
  insert a single row into the table: "verification_tokens"
  """
  insert_verification_tokens_one(
    """the row to be inserted"""
    object: verification_tokens_insert_input!

    """upsert condition"""
    on_conflict: verification_tokens_on_conflict
  ): verification_tokens

  """
  update data of the table: "accounts"
  """
  update_accounts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: accounts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input

    """filter the rows which have to be updated"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  update single row of the table: "accounts"
  """
  update_accounts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: accounts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input
    pk_columns: accounts_pk_columns_input!
  ): accounts

  """
  update multiples rows of table: "accounts"
  """
  update_accounts_many(
    """updates to execute, in order"""
    updates: [accounts_updates!]!
  ): [accounts_mutation_response]

  """
  update data of the table: "agent"
  """
  update_agent(
    """increments the numeric columns with given value of the filtered values"""
    _inc: agent_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: agent_set_input

    """filter the rows which have to be updated"""
    where: agent_bool_exp!
  ): agent_mutation_response

  """
  update single row of the table: "agent"
  """
  update_agent_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: agent_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: agent_set_input
    pk_columns: agent_pk_columns_input!
  ): agent

  """
  update multiples rows of table: "agent"
  """
  update_agent_many(
    """updates to execute, in order"""
    updates: [agent_updates!]!
  ): [agent_mutation_response]

  """
  update data of the table: "agent_type"
  """
  update_agent_type(
    """increments the numeric columns with given value of the filtered values"""
    _inc: agent_type_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: agent_type_set_input

    """filter the rows which have to be updated"""
    where: agent_type_bool_exp!
  ): agent_type_mutation_response

  """
  update single row of the table: "agent_type"
  """
  update_agent_type_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: agent_type_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: agent_type_set_input
    pk_columns: agent_type_pk_columns_input!
  ): agent_type

  """
  update multiples rows of table: "agent_type"
  """
  update_agent_type_many(
    """updates to execute, in order"""
    updates: [agent_type_updates!]!
  ): [agent_type_mutation_response]

  """
  update data of the table: "chunking_strategy"
  """
  update_chunking_strategy(
    """sets the columns of the filtered rows to the given values"""
    _set: chunking_strategy_set_input

    """filter the rows which have to be updated"""
    where: chunking_strategy_bool_exp!
  ): chunking_strategy_mutation_response

  """
  update single row of the table: "chunking_strategy"
  """
  update_chunking_strategy_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: chunking_strategy_set_input
    pk_columns: chunking_strategy_pk_columns_input!
  ): chunking_strategy

  """
  update multiples rows of table: "chunking_strategy"
  """
  update_chunking_strategy_many(
    """updates to execute, in order"""
    updates: [chunking_strategy_updates!]!
  ): [chunking_strategy_mutation_response]

  """
  update data of the table: "files"
  """
  update_files(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: files_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: files_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: files_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: files_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: files_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: files_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input

    """filter the rows which have to be updated"""
    where: files_bool_exp!
  ): files_mutation_response

  """
  update single row of the table: "files"
  """
  update_files_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: files_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: files_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: files_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: files_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: files_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: files_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input
    pk_columns: files_pk_columns_input!
  ): files

  """
  update multiples rows of table: "files"
  """
  update_files_many(
    """updates to execute, in order"""
    updates: [files_updates!]!
  ): [files_mutation_response]

  """
  update data of the table: "knowledge"
  """
  update_knowledge(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: knowledge_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: knowledge_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: knowledge_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: knowledge_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: knowledge_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: knowledge_set_input

    """filter the rows which have to be updated"""
    where: knowledge_bool_exp!
  ): knowledge_mutation_response

  """
  update data of the table: "knowledge_base"
  """
  update_knowledge_base(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: knowledge_base_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: knowledge_base_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: knowledge_base_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: knowledge_base_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: knowledge_base_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: knowledge_base_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: knowledge_base_set_input

    """filter the rows which have to be updated"""
    where: knowledge_base_bool_exp!
  ): knowledge_base_mutation_response

  """
  update single row of the table: "knowledge_base"
  """
  update_knowledge_base_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: knowledge_base_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: knowledge_base_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: knowledge_base_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: knowledge_base_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: knowledge_base_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: knowledge_base_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: knowledge_base_set_input
    pk_columns: knowledge_base_pk_columns_input!
  ): knowledge_base

  """
  update multiples rows of table: "knowledge_base"
  """
  update_knowledge_base_many(
    """updates to execute, in order"""
    updates: [knowledge_base_updates!]!
  ): [knowledge_base_mutation_response]

  """
  update data of the table: "knowledge_base_type"
  """
  update_knowledge_base_type(
    """sets the columns of the filtered rows to the given values"""
    _set: knowledge_base_type_set_input

    """filter the rows which have to be updated"""
    where: knowledge_base_type_bool_exp!
  ): knowledge_base_type_mutation_response

  """
  update single row of the table: "knowledge_base_type"
  """
  update_knowledge_base_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: knowledge_base_type_set_input
    pk_columns: knowledge_base_type_pk_columns_input!
  ): knowledge_base_type

  """
  update multiples rows of table: "knowledge_base_type"
  """
  update_knowledge_base_type_many(
    """updates to execute, in order"""
    updates: [knowledge_base_type_updates!]!
  ): [knowledge_base_type_mutation_response]

  """
  update single row of the table: "knowledge"
  """
  update_knowledge_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: knowledge_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: knowledge_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: knowledge_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: knowledge_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: knowledge_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: knowledge_set_input
    pk_columns: knowledge_pk_columns_input!
  ): knowledge

  """
  update multiples rows of table: "knowledge"
  """
  update_knowledge_many(
    """updates to execute, in order"""
    updates: [knowledge_updates!]!
  ): [knowledge_mutation_response]

  """
  update data of the table: "message"
  """
  update_message(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: message_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: message_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: message_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: message_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: message_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: message_set_input

    """filter the rows which have to be updated"""
    where: message_bool_exp!
  ): message_mutation_response

  """
  update single row of the table: "message"
  """
  update_message_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: message_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: message_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: message_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: message_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: message_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: message_set_input
    pk_columns: message_pk_columns_input!
  ): message

  """
  update data of the table: "message_feedback"
  """
  update_message_feedback(
    """sets the columns of the filtered rows to the given values"""
    _set: message_feedback_set_input

    """filter the rows which have to be updated"""
    where: message_feedback_bool_exp!
  ): message_feedback_mutation_response

  """
  update single row of the table: "message_feedback"
  """
  update_message_feedback_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: message_feedback_set_input
    pk_columns: message_feedback_pk_columns_input!
  ): message_feedback

  """
  update multiples rows of table: "message_feedback"
  """
  update_message_feedback_many(
    """updates to execute, in order"""
    updates: [message_feedback_updates!]!
  ): [message_feedback_mutation_response]

  """
  update multiples rows of table: "message"
  """
  update_message_many(
    """updates to execute, in order"""
    updates: [message_updates!]!
  ): [message_mutation_response]

  """
  update data of the table: "message_role"
  """
  update_message_role(
    """sets the columns of the filtered rows to the given values"""
    _set: message_role_set_input

    """filter the rows which have to be updated"""
    where: message_role_bool_exp!
  ): message_role_mutation_response

  """
  update single row of the table: "message_role"
  """
  update_message_role_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: message_role_set_input
    pk_columns: message_role_pk_columns_input!
  ): message_role

  """
  update multiples rows of table: "message_role"
  """
  update_message_role_many(
    """updates to execute, in order"""
    updates: [message_role_updates!]!
  ): [message_role_mutation_response]

  """
  update data of the table: "message_status"
  """
  update_message_status(
    """sets the columns of the filtered rows to the given values"""
    _set: message_status_set_input

    """filter the rows which have to be updated"""
    where: message_status_bool_exp!
  ): message_status_mutation_response

  """
  update single row of the table: "message_status"
  """
  update_message_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: message_status_set_input
    pk_columns: message_status_pk_columns_input!
  ): message_status

  """
  update multiples rows of table: "message_status"
  """
  update_message_status_many(
    """updates to execute, in order"""
    updates: [message_status_updates!]!
  ): [message_status_mutation_response]

  """
  update data of the table: "multimodal_data"
  """
  update_multimodal_data(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: multimodal_data_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: multimodal_data_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: multimodal_data_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: multimodal_data_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: multimodal_data_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: multimodal_data_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: multimodal_data_set_input

    """filter the rows which have to be updated"""
    where: multimodal_data_bool_exp!
  ): multimodal_data_mutation_response

  """
  update single row of the table: "multimodal_data"
  """
  update_multimodal_data_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: multimodal_data_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: multimodal_data_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: multimodal_data_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: multimodal_data_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: multimodal_data_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: multimodal_data_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: multimodal_data_set_input
    pk_columns: multimodal_data_pk_columns_input!
  ): multimodal_data

  """
  update multiples rows of table: "multimodal_data"
  """
  update_multimodal_data_many(
    """updates to execute, in order"""
    updates: [multimodal_data_updates!]!
  ): [multimodal_data_mutation_response]

  """
  update data of the table: "prompt_hub"
  """
  update_prompt_hub(
    """increments the numeric columns with given value of the filtered values"""
    _inc: prompt_hub_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: prompt_hub_set_input

    """filter the rows which have to be updated"""
    where: prompt_hub_bool_exp!
  ): prompt_hub_mutation_response

  """
  update single row of the table: "prompt_hub"
  """
  update_prompt_hub_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: prompt_hub_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: prompt_hub_set_input
    pk_columns: prompt_hub_pk_columns_input!
  ): prompt_hub

  """
  update multiples rows of table: "prompt_hub"
  """
  update_prompt_hub_many(
    """updates to execute, in order"""
    updates: [prompt_hub_updates!]!
  ): [prompt_hub_mutation_response]

  """
  update data of the table: "prompt_template"
  """
  update_prompt_template(
    """increments the numeric columns with given value of the filtered values"""
    _inc: prompt_template_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: prompt_template_set_input

    """filter the rows which have to be updated"""
    where: prompt_template_bool_exp!
  ): prompt_template_mutation_response

  """
  update single row of the table: "prompt_template"
  """
  update_prompt_template_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: prompt_template_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: prompt_template_set_input
    pk_columns: prompt_template_pk_columns_input!
  ): prompt_template

  """
  update multiples rows of table: "prompt_template"
  """
  update_prompt_template_many(
    """updates to execute, in order"""
    updates: [prompt_template_updates!]!
  ): [prompt_template_mutation_response]

  """
  update data of the table: "provider_type"
  """
  update_provider_type(
    """sets the columns of the filtered rows to the given values"""
    _set: provider_type_set_input

    """filter the rows which have to be updated"""
    where: provider_type_bool_exp!
  ): provider_type_mutation_response

  """
  update single row of the table: "provider_type"
  """
  update_provider_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: provider_type_set_input
    pk_columns: provider_type_pk_columns_input!
  ): provider_type

  """
  update multiples rows of table: "provider_type"
  """
  update_provider_type_many(
    """updates to execute, in order"""
    updates: [provider_type_updates!]!
  ): [provider_type_mutation_response]

  """
  update data of the table: "r_agent_kb"
  """
  update_r_agent_kb(
    """increments the numeric columns with given value of the filtered values"""
    _inc: r_agent_kb_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: r_agent_kb_set_input

    """filter the rows which have to be updated"""
    where: r_agent_kb_bool_exp!
  ): r_agent_kb_mutation_response

  """
  update single row of the table: "r_agent_kb"
  """
  update_r_agent_kb_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: r_agent_kb_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: r_agent_kb_set_input
    pk_columns: r_agent_kb_pk_columns_input!
  ): r_agent_kb

  """
  update multiples rows of table: "r_agent_kb"
  """
  update_r_agent_kb_many(
    """updates to execute, in order"""
    updates: [r_agent_kb_updates!]!
  ): [r_agent_kb_mutation_response]

  """
  update data of the table: "r_agent_user"
  """
  update_r_agent_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: r_agent_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: r_agent_user_set_input

    """filter the rows which have to be updated"""
    where: r_agent_user_bool_exp!
  ): r_agent_user_mutation_response

  """
  update single row of the table: "r_agent_user"
  """
  update_r_agent_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: r_agent_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: r_agent_user_set_input
    pk_columns: r_agent_user_pk_columns_input!
  ): r_agent_user

  """
  update multiples rows of table: "r_agent_user"
  """
  update_r_agent_user_many(
    """updates to execute, in order"""
    updates: [r_agent_user_updates!]!
  ): [r_agent_user_mutation_response]

  """
  update data of the table: "r_kb_user"
  """
  update_r_kb_user(
    """increments the numeric columns with given value of the filtered values"""
    _inc: r_kb_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: r_kb_user_set_input

    """filter the rows which have to be updated"""
    where: r_kb_user_bool_exp!
  ): r_kb_user_mutation_response

  """
  update single row of the table: "r_kb_user"
  """
  update_r_kb_user_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: r_kb_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: r_kb_user_set_input
    pk_columns: r_kb_user_pk_columns_input!
  ): r_kb_user

  """
  update multiples rows of table: "r_kb_user"
  """
  update_r_kb_user_many(
    """updates to execute, in order"""
    updates: [r_kb_user_updates!]!
  ): [r_kb_user_mutation_response]

  """
  update data of the table: "role"
  """
  update_role(
    """sets the columns of the filtered rows to the given values"""
    _set: role_set_input

    """filter the rows which have to be updated"""
    where: role_bool_exp!
  ): role_mutation_response

  """
  update single row of the table: "role"
  """
  update_role_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: role_set_input
    pk_columns: role_pk_columns_input!
  ): role

  """
  update multiples rows of table: "role"
  """
  update_role_many(
    """updates to execute, in order"""
    updates: [role_updates!]!
  ): [role_mutation_response]

  """
  update data of the table: "sessions"
  """
  update_sessions(
    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input

    """filter the rows which have to be updated"""
    where: sessions_bool_exp!
  ): sessions_mutation_response

  """
  update single row of the table: "sessions"
  """
  update_sessions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: sessions_set_input
    pk_columns: sessions_pk_columns_input!
  ): sessions

  """
  update multiples rows of table: "sessions"
  """
  update_sessions_many(
    """updates to execute, in order"""
    updates: [sessions_updates!]!
  ): [sessions_mutation_response]

  """
  update data of the table: "spider"
  """
  update_spider(
    """sets the columns of the filtered rows to the given values"""
    _set: spider_set_input

    """filter the rows which have to be updated"""
    where: spider_bool_exp!
  ): spider_mutation_response

  """
  update single row of the table: "spider"
  """
  update_spider_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: spider_set_input
    pk_columns: spider_pk_columns_input!
  ): spider

  """
  update multiples rows of table: "spider"
  """
  update_spider_many(
    """updates to execute, in order"""
    updates: [spider_updates!]!
  ): [spider_mutation_response]

  """
  update data of the table: "status"
  """
  update_status(
    """sets the columns of the filtered rows to the given values"""
    _set: status_set_input

    """filter the rows which have to be updated"""
    where: status_bool_exp!
  ): status_mutation_response

  """
  update single row of the table: "status"
  """
  update_status_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: status_set_input
    pk_columns: status_pk_columns_input!
  ): status

  """
  update multiples rows of table: "status"
  """
  update_status_many(
    """updates to execute, in order"""
    updates: [status_updates!]!
  ): [status_mutation_response]

  """
  update data of the table: "topic_history"
  """
  update_topic_history(
    """sets the columns of the filtered rows to the given values"""
    _set: topic_history_set_input

    """filter the rows which have to be updated"""
    where: topic_history_bool_exp!
  ): topic_history_mutation_response

  """
  update single row of the table: "topic_history"
  """
  update_topic_history_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: topic_history_set_input
    pk_columns: topic_history_pk_columns_input!
  ): topic_history

  """
  update multiples rows of table: "topic_history"
  """
  update_topic_history_many(
    """updates to execute, in order"""
    updates: [topic_history_updates!]!
  ): [topic_history_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]

  """
  update data of the table: "verification_tokens"
  """
  update_verification_tokens(
    """sets the columns of the filtered rows to the given values"""
    _set: verification_tokens_set_input

    """filter the rows which have to be updated"""
    where: verification_tokens_bool_exp!
  ): verification_tokens_mutation_response

  """
  update single row of the table: "verification_tokens"
  """
  update_verification_tokens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: verification_tokens_set_input
    pk_columns: verification_tokens_pk_columns_input!
  ): verification_tokens

  """
  update multiples rows of table: "verification_tokens"
  """
  update_verification_tokens_many(
    """updates to execute, in order"""
    updates: [verification_tokens_updates!]!
  ): [verification_tokens_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""prompt hub"""
type prompt_hub {
  created_at: timestamptz!
  creator_id: uuid
  id: Int!
  name: String
  template_ids: [Int!]

  """An array relationship"""
  templates(
    """distinct select on columns"""
    distinct_on: [prompt_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_template_order_by!]

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): [prompt_template!]!

  """An aggregate relationship"""
  templates_aggregate(
    """distinct select on columns"""
    distinct_on: [prompt_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_template_order_by!]

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): prompt_template_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "prompt_hub"
"""
type prompt_hub_aggregate {
  aggregate: prompt_hub_aggregate_fields
  nodes: [prompt_hub!]!
}

"""
aggregate fields of "prompt_hub"
"""
type prompt_hub_aggregate_fields {
  avg: prompt_hub_avg_fields
  count(columns: [prompt_hub_select_column!], distinct: Boolean): Int!
  max: prompt_hub_max_fields
  min: prompt_hub_min_fields
  stddev: prompt_hub_stddev_fields
  stddev_pop: prompt_hub_stddev_pop_fields
  stddev_samp: prompt_hub_stddev_samp_fields
  sum: prompt_hub_sum_fields
  var_pop: prompt_hub_var_pop_fields
  var_samp: prompt_hub_var_samp_fields
  variance: prompt_hub_variance_fields
}

"""aggregate avg on columns"""
type prompt_hub_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "prompt_hub". All fields are combined with a logical 'AND'.
"""
input prompt_hub_bool_exp {
  _and: [prompt_hub_bool_exp!]
  _not: prompt_hub_bool_exp
  _or: [prompt_hub_bool_exp!]
  created_at: timestamptz_comparison_exp
  creator_id: uuid_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  template_ids: Int_array_comparison_exp
  templates: prompt_template_bool_exp
  templates_aggregate: prompt_template_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "prompt_hub"
"""
enum prompt_hub_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  prompt_hub_pkey
}

"""
input type for incrementing numeric columns in table "prompt_hub"
"""
input prompt_hub_inc_input {
  id: Int
}

"""
input type for inserting data into table "prompt_hub"
"""
input prompt_hub_insert_input {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  template_ids: [Int!]
  templates: prompt_template_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type prompt_hub_max_fields {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  template_ids: [Int!]
  updated_at: timestamptz
}

"""aggregate min on columns"""
type prompt_hub_min_fields {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  template_ids: [Int!]
  updated_at: timestamptz
}

"""
response of any mutation on the table "prompt_hub"
"""
type prompt_hub_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [prompt_hub!]!
}

"""
input type for inserting object relation for remote table "prompt_hub"
"""
input prompt_hub_obj_rel_insert_input {
  data: prompt_hub_insert_input!

  """upsert condition"""
  on_conflict: prompt_hub_on_conflict
}

"""
on_conflict condition type for table "prompt_hub"
"""
input prompt_hub_on_conflict {
  constraint: prompt_hub_constraint!
  update_columns: [prompt_hub_update_column!]! = []
  where: prompt_hub_bool_exp
}

"""Ordering options when selecting data from "prompt_hub"."""
input prompt_hub_order_by {
  created_at: order_by
  creator_id: order_by
  id: order_by
  name: order_by
  template_ids: order_by
  templates_aggregate: prompt_template_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: prompt_hub"""
input prompt_hub_pk_columns_input {
  id: Int!
}

"""
select columns of table "prompt_hub"
"""
enum prompt_hub_select_column {
  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  template_ids

  """column name"""
  updated_at
}

"""
input type for updating data in table "prompt_hub"
"""
input prompt_hub_set_input {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  template_ids: [Int!]
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type prompt_hub_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type prompt_hub_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type prompt_hub_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "prompt_hub"
"""
input prompt_hub_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: prompt_hub_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input prompt_hub_stream_cursor_value_input {
  created_at: timestamptz
  creator_id: uuid
  id: Int
  name: String
  template_ids: [Int!]
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type prompt_hub_sum_fields {
  id: Int
}

"""
update columns of table "prompt_hub"
"""
enum prompt_hub_update_column {
  """column name"""
  created_at

  """column name"""
  creator_id

  """column name"""
  id

  """column name"""
  name

  """column name"""
  template_ids

  """column name"""
  updated_at
}

input prompt_hub_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: prompt_hub_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: prompt_hub_set_input

  """filter the rows which have to be updated"""
  where: prompt_hub_bool_exp!
}

"""aggregate var_pop on columns"""
type prompt_hub_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type prompt_hub_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type prompt_hub_variance_fields {
  id: Float
}

"""prompt_template"""
type prompt_template {
  id: Int!
  order: Int
  prompt_id: Int
  role: message_role_enum!
  template: String!
}

"""
aggregated selection of "prompt_template"
"""
type prompt_template_aggregate {
  aggregate: prompt_template_aggregate_fields
  nodes: [prompt_template!]!
}

input prompt_template_aggregate_bool_exp {
  count: prompt_template_aggregate_bool_exp_count
}

input prompt_template_aggregate_bool_exp_count {
  arguments: [prompt_template_select_column!]
  distinct: Boolean
  filter: prompt_template_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "prompt_template"
"""
type prompt_template_aggregate_fields {
  avg: prompt_template_avg_fields
  count(columns: [prompt_template_select_column!], distinct: Boolean): Int!
  max: prompt_template_max_fields
  min: prompt_template_min_fields
  stddev: prompt_template_stddev_fields
  stddev_pop: prompt_template_stddev_pop_fields
  stddev_samp: prompt_template_stddev_samp_fields
  sum: prompt_template_sum_fields
  var_pop: prompt_template_var_pop_fields
  var_samp: prompt_template_var_samp_fields
  variance: prompt_template_variance_fields
}

"""
order by aggregate values of table "prompt_template"
"""
input prompt_template_aggregate_order_by {
  avg: prompt_template_avg_order_by
  count: order_by
  max: prompt_template_max_order_by
  min: prompt_template_min_order_by
  stddev: prompt_template_stddev_order_by
  stddev_pop: prompt_template_stddev_pop_order_by
  stddev_samp: prompt_template_stddev_samp_order_by
  sum: prompt_template_sum_order_by
  var_pop: prompt_template_var_pop_order_by
  var_samp: prompt_template_var_samp_order_by
  variance: prompt_template_variance_order_by
}

"""
input type for inserting array relation for remote table "prompt_template"
"""
input prompt_template_arr_rel_insert_input {
  data: [prompt_template_insert_input!]!

  """upsert condition"""
  on_conflict: prompt_template_on_conflict
}

"""aggregate avg on columns"""
type prompt_template_avg_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by avg() on columns of table "prompt_template"
"""
input prompt_template_avg_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""
Boolean expression to filter rows from the table "prompt_template". All fields are combined with a logical 'AND'.
"""
input prompt_template_bool_exp {
  _and: [prompt_template_bool_exp!]
  _not: prompt_template_bool_exp
  _or: [prompt_template_bool_exp!]
  id: Int_comparison_exp
  order: Int_comparison_exp
  prompt_id: Int_comparison_exp
  role: message_role_enum_comparison_exp
  template: String_comparison_exp
}

"""
unique or primary key constraints on table "prompt_template"
"""
enum prompt_template_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  prompt_template_pkey
}

"""
input type for incrementing numeric columns in table "prompt_template"
"""
input prompt_template_inc_input {
  id: Int
  order: Int
  prompt_id: Int
}

"""
input type for inserting data into table "prompt_template"
"""
input prompt_template_insert_input {
  id: Int
  order: Int
  prompt_id: Int
  role: message_role_enum
  template: String
}

"""aggregate max on columns"""
type prompt_template_max_fields {
  id: Int
  order: Int
  prompt_id: Int
  template: String
}

"""
order by max() on columns of table "prompt_template"
"""
input prompt_template_max_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  template: order_by
}

"""aggregate min on columns"""
type prompt_template_min_fields {
  id: Int
  order: Int
  prompt_id: Int
  template: String
}

"""
order by min() on columns of table "prompt_template"
"""
input prompt_template_min_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  template: order_by
}

"""
response of any mutation on the table "prompt_template"
"""
type prompt_template_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [prompt_template!]!
}

"""
on_conflict condition type for table "prompt_template"
"""
input prompt_template_on_conflict {
  constraint: prompt_template_constraint!
  update_columns: [prompt_template_update_column!]! = []
  where: prompt_template_bool_exp
}

"""Ordering options when selecting data from "prompt_template"."""
input prompt_template_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
  role: order_by
  template: order_by
}

"""primary key columns input for table: prompt_template"""
input prompt_template_pk_columns_input {
  id: Int!
}

"""
select columns of table "prompt_template"
"""
enum prompt_template_select_column {
  """column name"""
  id

  """column name"""
  order

  """column name"""
  prompt_id

  """column name"""
  role

  """column name"""
  template
}

"""
input type for updating data in table "prompt_template"
"""
input prompt_template_set_input {
  id: Int
  order: Int
  prompt_id: Int
  role: message_role_enum
  template: String
}

"""aggregate stddev on columns"""
type prompt_template_stddev_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by stddev() on columns of table "prompt_template"
"""
input prompt_template_stddev_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""aggregate stddev_pop on columns"""
type prompt_template_stddev_pop_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by stddev_pop() on columns of table "prompt_template"
"""
input prompt_template_stddev_pop_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""aggregate stddev_samp on columns"""
type prompt_template_stddev_samp_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by stddev_samp() on columns of table "prompt_template"
"""
input prompt_template_stddev_samp_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""
Streaming cursor of the table "prompt_template"
"""
input prompt_template_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: prompt_template_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input prompt_template_stream_cursor_value_input {
  id: Int
  order: Int
  prompt_id: Int
  role: message_role_enum
  template: String
}

"""aggregate sum on columns"""
type prompt_template_sum_fields {
  id: Int
  order: Int
  prompt_id: Int
}

"""
order by sum() on columns of table "prompt_template"
"""
input prompt_template_sum_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""
update columns of table "prompt_template"
"""
enum prompt_template_update_column {
  """column name"""
  id

  """column name"""
  order

  """column name"""
  prompt_id

  """column name"""
  role

  """column name"""
  template
}

input prompt_template_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: prompt_template_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: prompt_template_set_input

  """filter the rows which have to be updated"""
  where: prompt_template_bool_exp!
}

"""aggregate var_pop on columns"""
type prompt_template_var_pop_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by var_pop() on columns of table "prompt_template"
"""
input prompt_template_var_pop_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""aggregate var_samp on columns"""
type prompt_template_var_samp_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by var_samp() on columns of table "prompt_template"
"""
input prompt_template_var_samp_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""aggregate variance on columns"""
type prompt_template_variance_fields {
  id: Float
  order: Float
  prompt_id: Float
}

"""
order by variance() on columns of table "prompt_template"
"""
input prompt_template_variance_order_by {
  id: order_by
  order: order_by
  prompt_id: order_by
}

"""
columns and relationships of "provider_type"
"""
type provider_type {
  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """An aggregate relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!
  value: String!
}

"""
aggregated selection of "provider_type"
"""
type provider_type_aggregate {
  aggregate: provider_type_aggregate_fields
  nodes: [provider_type!]!
}

"""
aggregate fields of "provider_type"
"""
type provider_type_aggregate_fields {
  count(columns: [provider_type_select_column!], distinct: Boolean): Int!
  max: provider_type_max_fields
  min: provider_type_min_fields
}

"""
Boolean expression to filter rows from the table "provider_type". All fields are combined with a logical 'AND'.
"""
input provider_type_bool_exp {
  _and: [provider_type_bool_exp!]
  _not: provider_type_bool_exp
  _or: [provider_type_bool_exp!]
  accounts: accounts_bool_exp
  accounts_aggregate: accounts_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "provider_type"
"""
enum provider_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  provider_type_pkey
}

"""
input type for inserting data into table "provider_type"
"""
input provider_type_insert_input {
  accounts: accounts_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type provider_type_max_fields {
  value: String
}

"""aggregate min on columns"""
type provider_type_min_fields {
  value: String
}

"""
response of any mutation on the table "provider_type"
"""
type provider_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [provider_type!]!
}

"""
input type for inserting object relation for remote table "provider_type"
"""
input provider_type_obj_rel_insert_input {
  data: provider_type_insert_input!

  """upsert condition"""
  on_conflict: provider_type_on_conflict
}

"""
on_conflict condition type for table "provider_type"
"""
input provider_type_on_conflict {
  constraint: provider_type_constraint!
  update_columns: [provider_type_update_column!]! = []
  where: provider_type_bool_exp
}

"""Ordering options when selecting data from "provider_type"."""
input provider_type_order_by {
  accounts_aggregate: accounts_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: provider_type"""
input provider_type_pk_columns_input {
  value: String!
}

"""
select columns of table "provider_type"
"""
enum provider_type_select_column {
  """column name"""
  value
}

"""
input type for updating data in table "provider_type"
"""
input provider_type_set_input {
  value: String
}

"""
Streaming cursor of the table "provider_type"
"""
input provider_type_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: provider_type_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input provider_type_stream_cursor_value_input {
  value: String
}

"""
update columns of table "provider_type"
"""
enum provider_type_update_column {
  """column name"""
  value
}

input provider_type_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: provider_type_set_input

  """filter the rows which have to be updated"""
  where: provider_type_bool_exp!
}

type query_root {
  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """An aggregate relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(id: uuid!): accounts

  """
  fetch data from the table: "agent"
  """
  agent(
    """distinct select on columns"""
    distinct_on: [agent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_order_by!]

    """filter the rows returned"""
    where: agent_bool_exp
  ): [agent!]!

  """
  fetch aggregated fields from the table: "agent"
  """
  agent_aggregate(
    """distinct select on columns"""
    distinct_on: [agent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_order_by!]

    """filter the rows returned"""
    where: agent_bool_exp
  ): agent_aggregate!

  """fetch data from the table: "agent" using primary key columns"""
  agent_by_pk(id: uuid!): agent

  """
  fetch data from the table: "agent_type"
  """
  agent_type(
    """distinct select on columns"""
    distinct_on: [agent_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_type_order_by!]

    """filter the rows returned"""
    where: agent_type_bool_exp
  ): [agent_type!]!

  """
  fetch aggregated fields from the table: "agent_type"
  """
  agent_type_aggregate(
    """distinct select on columns"""
    distinct_on: [agent_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_type_order_by!]

    """filter the rows returned"""
    where: agent_type_bool_exp
  ): agent_type_aggregate!

  """fetch data from the table: "agent_type" using primary key columns"""
  agent_type_by_pk(id: Int!): agent_type

  """
  fetch data from the table: "chunking_strategy"
  """
  chunking_strategy(
    """distinct select on columns"""
    distinct_on: [chunking_strategy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chunking_strategy_order_by!]

    """filter the rows returned"""
    where: chunking_strategy_bool_exp
  ): [chunking_strategy!]!

  """
  fetch aggregated fields from the table: "chunking_strategy"
  """
  chunking_strategy_aggregate(
    """distinct select on columns"""
    distinct_on: [chunking_strategy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chunking_strategy_order_by!]

    """filter the rows returned"""
    where: chunking_strategy_bool_exp
  ): chunking_strategy_aggregate!

  """
  fetch data from the table: "chunking_strategy" using primary key columns
  """
  chunking_strategy_by_pk(value: String!): chunking_strategy

  """
  fetch data from the table: "files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "files"
  """
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """fetch data from the table: "files" using primary key columns"""
  files_by_pk(id: uuid!): files

  """
  fetch data from the table: "knowledge"
  """
  knowledge(
    """distinct select on columns"""
    distinct_on: [knowledge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_order_by!]

    """filter the rows returned"""
    where: knowledge_bool_exp
  ): [knowledge!]!

  """
  fetch aggregated fields from the table: "knowledge"
  """
  knowledge_aggregate(
    """distinct select on columns"""
    distinct_on: [knowledge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_order_by!]

    """filter the rows returned"""
    where: knowledge_bool_exp
  ): knowledge_aggregate!

  """
  fetch data from the table: "knowledge_base"
  """
  knowledge_base(
    """distinct select on columns"""
    distinct_on: [knowledge_base_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_order_by!]

    """filter the rows returned"""
    where: knowledge_base_bool_exp
  ): [knowledge_base!]!

  """
  fetch aggregated fields from the table: "knowledge_base"
  """
  knowledge_base_aggregate(
    """distinct select on columns"""
    distinct_on: [knowledge_base_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_order_by!]

    """filter the rows returned"""
    where: knowledge_base_bool_exp
  ): knowledge_base_aggregate!

  """fetch data from the table: "knowledge_base" using primary key columns"""
  knowledge_base_by_pk(id: uuid!): knowledge_base

  """
  fetch data from the table: "knowledge_base_type"
  """
  knowledge_base_type(
    """distinct select on columns"""
    distinct_on: [knowledge_base_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_type_order_by!]

    """filter the rows returned"""
    where: knowledge_base_type_bool_exp
  ): [knowledge_base_type!]!

  """
  fetch aggregated fields from the table: "knowledge_base_type"
  """
  knowledge_base_type_aggregate(
    """distinct select on columns"""
    distinct_on: [knowledge_base_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_type_order_by!]

    """filter the rows returned"""
    where: knowledge_base_type_bool_exp
  ): knowledge_base_type_aggregate!

  """
  fetch data from the table: "knowledge_base_type" using primary key columns
  """
  knowledge_base_type_by_pk(value: String!): knowledge_base_type

  """fetch data from the table: "knowledge" using primary key columns"""
  knowledge_by_pk(id: uuid!): knowledge

  """
  fetch data from the table: "message"
  """
  message(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): [message!]!

  """
  fetch aggregated fields from the table: "message"
  """
  message_aggregate(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): message_aggregate!

  """fetch data from the table: "message" using primary key columns"""
  message_by_pk(id: uuid!): message

  """
  fetch data from the table: "message_feedback"
  """
  message_feedback(
    """distinct select on columns"""
    distinct_on: [message_feedback_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_feedback_order_by!]

    """filter the rows returned"""
    where: message_feedback_bool_exp
  ): [message_feedback!]!

  """
  fetch aggregated fields from the table: "message_feedback"
  """
  message_feedback_aggregate(
    """distinct select on columns"""
    distinct_on: [message_feedback_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_feedback_order_by!]

    """filter the rows returned"""
    where: message_feedback_bool_exp
  ): message_feedback_aggregate!

  """
  fetch data from the table: "message_feedback" using primary key columns
  """
  message_feedback_by_pk(value: String!): message_feedback

  """
  fetch data from the table: "message_role"
  """
  message_role(
    """distinct select on columns"""
    distinct_on: [message_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_role_order_by!]

    """filter the rows returned"""
    where: message_role_bool_exp
  ): [message_role!]!

  """
  fetch aggregated fields from the table: "message_role"
  """
  message_role_aggregate(
    """distinct select on columns"""
    distinct_on: [message_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_role_order_by!]

    """filter the rows returned"""
    where: message_role_bool_exp
  ): message_role_aggregate!

  """fetch data from the table: "message_role" using primary key columns"""
  message_role_by_pk(value: String!): message_role

  """
  fetch data from the table: "message_status"
  """
  message_status(
    """distinct select on columns"""
    distinct_on: [message_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_status_order_by!]

    """filter the rows returned"""
    where: message_status_bool_exp
  ): [message_status!]!

  """
  fetch aggregated fields from the table: "message_status"
  """
  message_status_aggregate(
    """distinct select on columns"""
    distinct_on: [message_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_status_order_by!]

    """filter the rows returned"""
    where: message_status_bool_exp
  ): message_status_aggregate!

  """fetch data from the table: "message_status" using primary key columns"""
  message_status_by_pk(value: String!): message_status

  """
  fetch data from the table: "multimodal_data"
  """
  multimodal_data(
    """distinct select on columns"""
    distinct_on: [multimodal_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [multimodal_data_order_by!]

    """filter the rows returned"""
    where: multimodal_data_bool_exp
  ): [multimodal_data!]!

  """
  fetch aggregated fields from the table: "multimodal_data"
  """
  multimodal_data_aggregate(
    """distinct select on columns"""
    distinct_on: [multimodal_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [multimodal_data_order_by!]

    """filter the rows returned"""
    where: multimodal_data_bool_exp
  ): multimodal_data_aggregate!

  """fetch data from the table: "multimodal_data" using primary key columns"""
  multimodal_data_by_pk(id: uuid!): multimodal_data

  """
  fetch data from the table: "prompt_hub"
  """
  prompt_hub(
    """distinct select on columns"""
    distinct_on: [prompt_hub_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_hub_order_by!]

    """filter the rows returned"""
    where: prompt_hub_bool_exp
  ): [prompt_hub!]!

  """
  fetch aggregated fields from the table: "prompt_hub"
  """
  prompt_hub_aggregate(
    """distinct select on columns"""
    distinct_on: [prompt_hub_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_hub_order_by!]

    """filter the rows returned"""
    where: prompt_hub_bool_exp
  ): prompt_hub_aggregate!

  """fetch data from the table: "prompt_hub" using primary key columns"""
  prompt_hub_by_pk(id: Int!): prompt_hub

  """
  fetch data from the table: "prompt_template"
  """
  prompt_template(
    """distinct select on columns"""
    distinct_on: [prompt_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_template_order_by!]

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): [prompt_template!]!

  """
  fetch aggregated fields from the table: "prompt_template"
  """
  prompt_template_aggregate(
    """distinct select on columns"""
    distinct_on: [prompt_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_template_order_by!]

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): prompt_template_aggregate!

  """fetch data from the table: "prompt_template" using primary key columns"""
  prompt_template_by_pk(id: Int!): prompt_template

  """
  fetch data from the table: "provider_type"
  """
  provider_type(
    """distinct select on columns"""
    distinct_on: [provider_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_type_order_by!]

    """filter the rows returned"""
    where: provider_type_bool_exp
  ): [provider_type!]!

  """
  fetch aggregated fields from the table: "provider_type"
  """
  provider_type_aggregate(
    """distinct select on columns"""
    distinct_on: [provider_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_type_order_by!]

    """filter the rows returned"""
    where: provider_type_bool_exp
  ): provider_type_aggregate!

  """fetch data from the table: "provider_type" using primary key columns"""
  provider_type_by_pk(value: String!): provider_type

  """
  fetch data from the table: "r_agent_kb"
  """
  r_agent_kb(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): [r_agent_kb!]!

  """
  fetch aggregated fields from the table: "r_agent_kb"
  """
  r_agent_kb_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): r_agent_kb_aggregate!

  """fetch data from the table: "r_agent_kb" using primary key columns"""
  r_agent_kb_by_pk(id: Int!): r_agent_kb

  """
  fetch data from the table: "r_agent_user"
  """
  r_agent_user(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): [r_agent_user!]!

  """
  fetch aggregated fields from the table: "r_agent_user"
  """
  r_agent_user_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): r_agent_user_aggregate!

  """fetch data from the table: "r_agent_user" using primary key columns"""
  r_agent_user_by_pk(id: Int!): r_agent_user

  """
  fetch data from the table: "r_kb_user"
  """
  r_kb_user(
    """distinct select on columns"""
    distinct_on: [r_kb_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_kb_user_order_by!]

    """filter the rows returned"""
    where: r_kb_user_bool_exp
  ): [r_kb_user!]!

  """
  fetch aggregated fields from the table: "r_kb_user"
  """
  r_kb_user_aggregate(
    """distinct select on columns"""
    distinct_on: [r_kb_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_kb_user_order_by!]

    """filter the rows returned"""
    where: r_kb_user_bool_exp
  ): r_kb_user_aggregate!

  """fetch data from the table: "r_kb_user" using primary key columns"""
  r_kb_user_by_pk(id: Int!): r_kb_user

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  role_aggregate(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): role_aggregate!

  """fetch data from the table: "role" using primary key columns"""
  role_by_pk(value: String!): role

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(sessionToken: String!): sessions

  """
  fetch data from the table: "spider"
  """
  spider(
    """distinct select on columns"""
    distinct_on: [spider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [spider_order_by!]

    """filter the rows returned"""
    where: spider_bool_exp
  ): [spider!]!

  """
  fetch aggregated fields from the table: "spider"
  """
  spider_aggregate(
    """distinct select on columns"""
    distinct_on: [spider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [spider_order_by!]

    """filter the rows returned"""
    where: spider_bool_exp
  ): spider_aggregate!

  """fetch data from the table: "spider" using primary key columns"""
  spider_by_pk(id: uuid!): spider

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch aggregated fields from the table: "status"
  """
  status_aggregate(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): status_aggregate!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(value: String!): status

  """
  fetch data from the table: "topic_history"
  """
  topic_history(
    """distinct select on columns"""
    distinct_on: [topic_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [topic_history_order_by!]

    """filter the rows returned"""
    where: topic_history_bool_exp
  ): [topic_history!]!

  """
  fetch aggregated fields from the table: "topic_history"
  """
  topic_history_aggregate(
    """distinct select on columns"""
    distinct_on: [topic_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [topic_history_order_by!]

    """filter the rows returned"""
    where: topic_history_bool_exp
  ): topic_history_aggregate!

  """fetch data from the table: "topic_history" using primary key columns"""
  topic_history_by_pk(id: uuid!): topic_history

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table: "verification_tokens"
  """
  verification_tokens(
    """distinct select on columns"""
    distinct_on: [verification_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_tokens_order_by!]

    """filter the rows returned"""
    where: verification_tokens_bool_exp
  ): [verification_tokens!]!

  """
  fetch aggregated fields from the table: "verification_tokens"
  """
  verification_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [verification_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_tokens_order_by!]

    """filter the rows returned"""
    where: verification_tokens_bool_exp
  ): verification_tokens_aggregate!

  """
  fetch data from the table: "verification_tokens" using primary key columns
  """
  verification_tokens_by_pk(token: String!): verification_tokens
}

"""agent knowledge_bases"""
type r_agent_kb {
  """An object relationship"""
  agent: agent!
  agent_id: uuid!
  created_at: timestamptz!
  id: Int!
  kb_id: uuid!

  """An object relationship"""
  knowledge_base: knowledge_base!
  updated_at: timestamptz!
}

"""
aggregated selection of "r_agent_kb"
"""
type r_agent_kb_aggregate {
  aggregate: r_agent_kb_aggregate_fields
  nodes: [r_agent_kb!]!
}

input r_agent_kb_aggregate_bool_exp {
  count: r_agent_kb_aggregate_bool_exp_count
}

input r_agent_kb_aggregate_bool_exp_count {
  arguments: [r_agent_kb_select_column!]
  distinct: Boolean
  filter: r_agent_kb_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "r_agent_kb"
"""
type r_agent_kb_aggregate_fields {
  avg: r_agent_kb_avg_fields
  count(columns: [r_agent_kb_select_column!], distinct: Boolean): Int!
  max: r_agent_kb_max_fields
  min: r_agent_kb_min_fields
  stddev: r_agent_kb_stddev_fields
  stddev_pop: r_agent_kb_stddev_pop_fields
  stddev_samp: r_agent_kb_stddev_samp_fields
  sum: r_agent_kb_sum_fields
  var_pop: r_agent_kb_var_pop_fields
  var_samp: r_agent_kb_var_samp_fields
  variance: r_agent_kb_variance_fields
}

"""
order by aggregate values of table "r_agent_kb"
"""
input r_agent_kb_aggregate_order_by {
  avg: r_agent_kb_avg_order_by
  count: order_by
  max: r_agent_kb_max_order_by
  min: r_agent_kb_min_order_by
  stddev: r_agent_kb_stddev_order_by
  stddev_pop: r_agent_kb_stddev_pop_order_by
  stddev_samp: r_agent_kb_stddev_samp_order_by
  sum: r_agent_kb_sum_order_by
  var_pop: r_agent_kb_var_pop_order_by
  var_samp: r_agent_kb_var_samp_order_by
  variance: r_agent_kb_variance_order_by
}

"""
input type for inserting array relation for remote table "r_agent_kb"
"""
input r_agent_kb_arr_rel_insert_input {
  data: [r_agent_kb_insert_input!]!

  """upsert condition"""
  on_conflict: r_agent_kb_on_conflict
}

"""aggregate avg on columns"""
type r_agent_kb_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "r_agent_kb"
"""
input r_agent_kb_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "r_agent_kb". All fields are combined with a logical 'AND'.
"""
input r_agent_kb_bool_exp {
  _and: [r_agent_kb_bool_exp!]
  _not: r_agent_kb_bool_exp
  _or: [r_agent_kb_bool_exp!]
  agent: agent_bool_exp
  agent_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  kb_id: uuid_comparison_exp
  knowledge_base: knowledge_base_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "r_agent_kb"
"""
enum r_agent_kb_constraint {
  """
  unique or primary key constraint on columns "agent_id", "kb_id"
  """
  r_agent_kb_agent_id_kb_id_key

  """
  unique or primary key constraint on columns "id"
  """
  r_agent_kb_pkey
}

"""
input type for incrementing numeric columns in table "r_agent_kb"
"""
input r_agent_kb_inc_input {
  id: Int
}

"""
input type for inserting data into table "r_agent_kb"
"""
input r_agent_kb_insert_input {
  agent: agent_obj_rel_insert_input
  agent_id: uuid
  created_at: timestamptz
  id: Int
  kb_id: uuid
  knowledge_base: knowledge_base_obj_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type r_agent_kb_max_fields {
  agent_id: uuid
  created_at: timestamptz
  id: Int
  kb_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "r_agent_kb"
"""
input r_agent_kb_max_order_by {
  agent_id: order_by
  created_at: order_by
  id: order_by
  kb_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type r_agent_kb_min_fields {
  agent_id: uuid
  created_at: timestamptz
  id: Int
  kb_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "r_agent_kb"
"""
input r_agent_kb_min_order_by {
  agent_id: order_by
  created_at: order_by
  id: order_by
  kb_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "r_agent_kb"
"""
type r_agent_kb_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [r_agent_kb!]!
}

"""
on_conflict condition type for table "r_agent_kb"
"""
input r_agent_kb_on_conflict {
  constraint: r_agent_kb_constraint!
  update_columns: [r_agent_kb_update_column!]! = []
  where: r_agent_kb_bool_exp
}

"""Ordering options when selecting data from "r_agent_kb"."""
input r_agent_kb_order_by {
  agent: agent_order_by
  agent_id: order_by
  created_at: order_by
  id: order_by
  kb_id: order_by
  knowledge_base: knowledge_base_order_by
  updated_at: order_by
}

"""primary key columns input for table: r_agent_kb"""
input r_agent_kb_pk_columns_input {
  id: Int!
}

"""
select columns of table "r_agent_kb"
"""
enum r_agent_kb_select_column {
  """column name"""
  agent_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  kb_id

  """column name"""
  updated_at
}

"""
input type for updating data in table "r_agent_kb"
"""
input r_agent_kb_set_input {
  agent_id: uuid
  created_at: timestamptz
  id: Int
  kb_id: uuid
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type r_agent_kb_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "r_agent_kb"
"""
input r_agent_kb_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type r_agent_kb_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "r_agent_kb"
"""
input r_agent_kb_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type r_agent_kb_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "r_agent_kb"
"""
input r_agent_kb_stddev_samp_order_by {
  id: order_by
}

"""
Streaming cursor of the table "r_agent_kb"
"""
input r_agent_kb_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: r_agent_kb_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input r_agent_kb_stream_cursor_value_input {
  agent_id: uuid
  created_at: timestamptz
  id: Int
  kb_id: uuid
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type r_agent_kb_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "r_agent_kb"
"""
input r_agent_kb_sum_order_by {
  id: order_by
}

"""
update columns of table "r_agent_kb"
"""
enum r_agent_kb_update_column {
  """column name"""
  agent_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  kb_id

  """column name"""
  updated_at
}

input r_agent_kb_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: r_agent_kb_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: r_agent_kb_set_input

  """filter the rows which have to be updated"""
  where: r_agent_kb_bool_exp!
}

"""aggregate var_pop on columns"""
type r_agent_kb_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "r_agent_kb"
"""
input r_agent_kb_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type r_agent_kb_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "r_agent_kb"
"""
input r_agent_kb_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type r_agent_kb_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "r_agent_kb"
"""
input r_agent_kb_variance_order_by {
  id: order_by
}

"""relation of agent and user"""
type r_agent_user {
  agent_id: uuid!
  id: Int!
  role: role_enum
  user_id: uuid!
}

"""
aggregated selection of "r_agent_user"
"""
type r_agent_user_aggregate {
  aggregate: r_agent_user_aggregate_fields
  nodes: [r_agent_user!]!
}

input r_agent_user_aggregate_bool_exp {
  count: r_agent_user_aggregate_bool_exp_count
}

input r_agent_user_aggregate_bool_exp_count {
  arguments: [r_agent_user_select_column!]
  distinct: Boolean
  filter: r_agent_user_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "r_agent_user"
"""
type r_agent_user_aggregate_fields {
  avg: r_agent_user_avg_fields
  count(columns: [r_agent_user_select_column!], distinct: Boolean): Int!
  max: r_agent_user_max_fields
  min: r_agent_user_min_fields
  stddev: r_agent_user_stddev_fields
  stddev_pop: r_agent_user_stddev_pop_fields
  stddev_samp: r_agent_user_stddev_samp_fields
  sum: r_agent_user_sum_fields
  var_pop: r_agent_user_var_pop_fields
  var_samp: r_agent_user_var_samp_fields
  variance: r_agent_user_variance_fields
}

"""
order by aggregate values of table "r_agent_user"
"""
input r_agent_user_aggregate_order_by {
  avg: r_agent_user_avg_order_by
  count: order_by
  max: r_agent_user_max_order_by
  min: r_agent_user_min_order_by
  stddev: r_agent_user_stddev_order_by
  stddev_pop: r_agent_user_stddev_pop_order_by
  stddev_samp: r_agent_user_stddev_samp_order_by
  sum: r_agent_user_sum_order_by
  var_pop: r_agent_user_var_pop_order_by
  var_samp: r_agent_user_var_samp_order_by
  variance: r_agent_user_variance_order_by
}

"""
input type for inserting array relation for remote table "r_agent_user"
"""
input r_agent_user_arr_rel_insert_input {
  data: [r_agent_user_insert_input!]!

  """upsert condition"""
  on_conflict: r_agent_user_on_conflict
}

"""aggregate avg on columns"""
type r_agent_user_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "r_agent_user"
"""
input r_agent_user_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "r_agent_user". All fields are combined with a logical 'AND'.
"""
input r_agent_user_bool_exp {
  _and: [r_agent_user_bool_exp!]
  _not: r_agent_user_bool_exp
  _or: [r_agent_user_bool_exp!]
  agent_id: uuid_comparison_exp
  id: Int_comparison_exp
  role: role_enum_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "r_agent_user"
"""
enum r_agent_user_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  r_agent_user_pkey
}

"""
input type for incrementing numeric columns in table "r_agent_user"
"""
input r_agent_user_inc_input {
  id: Int
}

"""
input type for inserting data into table "r_agent_user"
"""
input r_agent_user_insert_input {
  agent_id: uuid
  id: Int
  role: role_enum
  user_id: uuid
}

"""aggregate max on columns"""
type r_agent_user_max_fields {
  agent_id: uuid
  id: Int
  user_id: uuid
}

"""
order by max() on columns of table "r_agent_user"
"""
input r_agent_user_max_order_by {
  agent_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type r_agent_user_min_fields {
  agent_id: uuid
  id: Int
  user_id: uuid
}

"""
order by min() on columns of table "r_agent_user"
"""
input r_agent_user_min_order_by {
  agent_id: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "r_agent_user"
"""
type r_agent_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [r_agent_user!]!
}

"""
on_conflict condition type for table "r_agent_user"
"""
input r_agent_user_on_conflict {
  constraint: r_agent_user_constraint!
  update_columns: [r_agent_user_update_column!]! = []
  where: r_agent_user_bool_exp
}

"""Ordering options when selecting data from "r_agent_user"."""
input r_agent_user_order_by {
  agent_id: order_by
  id: order_by
  role: order_by
  user_id: order_by
}

"""primary key columns input for table: r_agent_user"""
input r_agent_user_pk_columns_input {
  id: Int!
}

"""
select columns of table "r_agent_user"
"""
enum r_agent_user_select_column {
  """column name"""
  agent_id

  """column name"""
  id

  """column name"""
  role

  """column name"""
  user_id
}

"""
input type for updating data in table "r_agent_user"
"""
input r_agent_user_set_input {
  agent_id: uuid
  id: Int
  role: role_enum
  user_id: uuid
}

"""aggregate stddev on columns"""
type r_agent_user_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "r_agent_user"
"""
input r_agent_user_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type r_agent_user_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "r_agent_user"
"""
input r_agent_user_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type r_agent_user_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "r_agent_user"
"""
input r_agent_user_stddev_samp_order_by {
  id: order_by
}

"""
Streaming cursor of the table "r_agent_user"
"""
input r_agent_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: r_agent_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input r_agent_user_stream_cursor_value_input {
  agent_id: uuid
  id: Int
  role: role_enum
  user_id: uuid
}

"""aggregate sum on columns"""
type r_agent_user_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "r_agent_user"
"""
input r_agent_user_sum_order_by {
  id: order_by
}

"""
update columns of table "r_agent_user"
"""
enum r_agent_user_update_column {
  """column name"""
  agent_id

  """column name"""
  id

  """column name"""
  role

  """column name"""
  user_id
}

input r_agent_user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: r_agent_user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: r_agent_user_set_input

  """filter the rows which have to be updated"""
  where: r_agent_user_bool_exp!
}

"""aggregate var_pop on columns"""
type r_agent_user_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "r_agent_user"
"""
input r_agent_user_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type r_agent_user_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "r_agent_user"
"""
input r_agent_user_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type r_agent_user_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "r_agent_user"
"""
input r_agent_user_variance_order_by {
  id: order_by
}

"""
columns and relationships of "r_kb_user"
"""
type r_kb_user {
  id: Int!
  kb_id: uuid!
  role: role_enum!
  user_id: uuid!
}

"""
aggregated selection of "r_kb_user"
"""
type r_kb_user_aggregate {
  aggregate: r_kb_user_aggregate_fields
  nodes: [r_kb_user!]!
}

"""
aggregate fields of "r_kb_user"
"""
type r_kb_user_aggregate_fields {
  avg: r_kb_user_avg_fields
  count(columns: [r_kb_user_select_column!], distinct: Boolean): Int!
  max: r_kb_user_max_fields
  min: r_kb_user_min_fields
  stddev: r_kb_user_stddev_fields
  stddev_pop: r_kb_user_stddev_pop_fields
  stddev_samp: r_kb_user_stddev_samp_fields
  sum: r_kb_user_sum_fields
  var_pop: r_kb_user_var_pop_fields
  var_samp: r_kb_user_var_samp_fields
  variance: r_kb_user_variance_fields
}

"""aggregate avg on columns"""
type r_kb_user_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "r_kb_user". All fields are combined with a logical 'AND'.
"""
input r_kb_user_bool_exp {
  _and: [r_kb_user_bool_exp!]
  _not: r_kb_user_bool_exp
  _or: [r_kb_user_bool_exp!]
  id: Int_comparison_exp
  kb_id: uuid_comparison_exp
  role: role_enum_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "r_kb_user"
"""
enum r_kb_user_constraint {
  """
  unique or primary key constraint on columns "user_id", "kb_id"
  """
  r_kb_user_kb_id_user_id_key

  """
  unique or primary key constraint on columns "id"
  """
  r_kb_user_pkey
}

"""
input type for incrementing numeric columns in table "r_kb_user"
"""
input r_kb_user_inc_input {
  id: Int
}

"""
input type for inserting data into table "r_kb_user"
"""
input r_kb_user_insert_input {
  id: Int
  kb_id: uuid
  role: role_enum
  user_id: uuid
}

"""aggregate max on columns"""
type r_kb_user_max_fields {
  id: Int
  kb_id: uuid
  user_id: uuid
}

"""aggregate min on columns"""
type r_kb_user_min_fields {
  id: Int
  kb_id: uuid
  user_id: uuid
}

"""
response of any mutation on the table "r_kb_user"
"""
type r_kb_user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [r_kb_user!]!
}

"""
on_conflict condition type for table "r_kb_user"
"""
input r_kb_user_on_conflict {
  constraint: r_kb_user_constraint!
  update_columns: [r_kb_user_update_column!]! = []
  where: r_kb_user_bool_exp
}

"""Ordering options when selecting data from "r_kb_user"."""
input r_kb_user_order_by {
  id: order_by
  kb_id: order_by
  role: order_by
  user_id: order_by
}

"""primary key columns input for table: r_kb_user"""
input r_kb_user_pk_columns_input {
  id: Int!
}

"""
select columns of table "r_kb_user"
"""
enum r_kb_user_select_column {
  """column name"""
  id

  """column name"""
  kb_id

  """column name"""
  role

  """column name"""
  user_id
}

"""
input type for updating data in table "r_kb_user"
"""
input r_kb_user_set_input {
  id: Int
  kb_id: uuid
  role: role_enum
  user_id: uuid
}

"""aggregate stddev on columns"""
type r_kb_user_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type r_kb_user_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type r_kb_user_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "r_kb_user"
"""
input r_kb_user_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: r_kb_user_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input r_kb_user_stream_cursor_value_input {
  id: Int
  kb_id: uuid
  role: role_enum
  user_id: uuid
}

"""aggregate sum on columns"""
type r_kb_user_sum_fields {
  id: Int
}

"""
update columns of table "r_kb_user"
"""
enum r_kb_user_update_column {
  """column name"""
  id

  """column name"""
  kb_id

  """column name"""
  role

  """column name"""
  user_id
}

input r_kb_user_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: r_kb_user_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: r_kb_user_set_input

  """filter the rows which have to be updated"""
  where: r_kb_user_bool_exp!
}

"""aggregate var_pop on columns"""
type r_kb_user_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type r_kb_user_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type r_kb_user_variance_fields {
  id: Float
}

"""
columns and relationships of "role"
"""
type role {
  comment: String!
  value: String!
}

"""
aggregated selection of "role"
"""
type role_aggregate {
  aggregate: role_aggregate_fields
  nodes: [role!]!
}

"""
aggregate fields of "role"
"""
type role_aggregate_fields {
  count(columns: [role_select_column!], distinct: Boolean): Int!
  max: role_max_fields
  min: role_min_fields
}

"""
Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
"""
input role_bool_exp {
  _and: [role_bool_exp!]
  _not: role_bool_exp
  _or: [role_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "role"
"""
enum role_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  role_pkey
}

enum role_enum {
  """admin"""
  admin

  """creator"""
  creator

  """user"""
  user
}

"""
Boolean expression to compare columns of type "role_enum". All fields are combined with logical 'AND'.
"""
input role_enum_comparison_exp {
  _eq: role_enum
  _in: [role_enum!]
  _is_null: Boolean
  _neq: role_enum
  _nin: [role_enum!]
}

"""
input type for inserting data into table "role"
"""
input role_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type role_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type role_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "role"
"""
type role_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [role!]!
}

"""
on_conflict condition type for table "role"
"""
input role_on_conflict {
  constraint: role_constraint!
  update_columns: [role_update_column!]! = []
  where: role_bool_exp
}

"""Ordering options when selecting data from "role"."""
input role_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: role"""
input role_pk_columns_input {
  value: String!
}

"""
select columns of table "role"
"""
enum role_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "role"
"""
input role_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "role"
"""
input role_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: role_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input role_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "role"
"""
enum role_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input role_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: role_set_input

  """filter the rows which have to be updated"""
  where: role_bool_exp!
}

"""
columns and relationships of "sessions"
"""
type sessions {
  expires: timestamptz!
  id: uuid!
  sessionToken: String!

  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "sessions"
"""
type sessions_aggregate {
  aggregate: sessions_aggregate_fields
  nodes: [sessions!]!
}

input sessions_aggregate_bool_exp {
  count: sessions_aggregate_bool_exp_count
}

input sessions_aggregate_bool_exp_count {
  arguments: [sessions_select_column!]
  distinct: Boolean
  filter: sessions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "sessions"
"""
type sessions_aggregate_fields {
  count(columns: [sessions_select_column!], distinct: Boolean): Int!
  max: sessions_max_fields
  min: sessions_min_fields
}

"""
order by aggregate values of table "sessions"
"""
input sessions_aggregate_order_by {
  count: order_by
  max: sessions_max_order_by
  min: sessions_min_order_by
}

"""
input type for inserting array relation for remote table "sessions"
"""
input sessions_arr_rel_insert_input {
  data: [sessions_insert_input!]!

  """upsert condition"""
  on_conflict: sessions_on_conflict
}

"""
Boolean expression to filter rows from the table "sessions". All fields are combined with a logical 'AND'.
"""
input sessions_bool_exp {
  _and: [sessions_bool_exp!]
  _not: sessions_bool_exp
  _or: [sessions_bool_exp!]
  expires: timestamptz_comparison_exp
  id: uuid_comparison_exp
  sessionToken: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "sessions"
"""
enum sessions_constraint {
  """
  unique or primary key constraint on columns "sessionToken"
  """
  sessions_pkey
}

"""
input type for inserting data into table "sessions"
"""
input sessions_insert_input {
  expires: timestamptz
  id: uuid
  sessionToken: String
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type sessions_max_fields {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
order by max() on columns of table "sessions"
"""
input sessions_max_order_by {
  expires: order_by
  id: order_by
  sessionToken: order_by
  userId: order_by
}

"""aggregate min on columns"""
type sessions_min_fields {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
order by min() on columns of table "sessions"
"""
input sessions_min_order_by {
  expires: order_by
  id: order_by
  sessionToken: order_by
  userId: order_by
}

"""
response of any mutation on the table "sessions"
"""
type sessions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [sessions!]!
}

"""
on_conflict condition type for table "sessions"
"""
input sessions_on_conflict {
  constraint: sessions_constraint!
  update_columns: [sessions_update_column!]! = []
  where: sessions_bool_exp
}

"""Ordering options when selecting data from "sessions"."""
input sessions_order_by {
  expires: order_by
  id: order_by
  sessionToken: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: sessions"""
input sessions_pk_columns_input {
  sessionToken: String!
}

"""
select columns of table "sessions"
"""
enum sessions_select_column {
  """column name"""
  expires

  """column name"""
  id

  """column name"""
  sessionToken

  """column name"""
  userId
}

"""
input type for updating data in table "sessions"
"""
input sessions_set_input {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
Streaming cursor of the table "sessions"
"""
input sessions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: sessions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input sessions_stream_cursor_value_input {
  expires: timestamptz
  id: uuid
  sessionToken: String
  userId: uuid
}

"""
update columns of table "sessions"
"""
enum sessions_update_column {
  """column name"""
  expires

  """column name"""
  id

  """column name"""
  sessionToken

  """column name"""
  userId
}

input sessions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: sessions_set_input

  """filter the rows which have to be updated"""
  where: sessions_bool_exp!
}

"""爬虫列表"""
type spider {
  id: uuid!
  name: String!
  start_urls: [String!]!
}

"""
aggregated selection of "spider"
"""
type spider_aggregate {
  aggregate: spider_aggregate_fields
  nodes: [spider!]!
}

"""
aggregate fields of "spider"
"""
type spider_aggregate_fields {
  count(columns: [spider_select_column!], distinct: Boolean): Int!
  max: spider_max_fields
  min: spider_min_fields
}

"""
Boolean expression to filter rows from the table "spider". All fields are combined with a logical 'AND'.
"""
input spider_bool_exp {
  _and: [spider_bool_exp!]
  _not: spider_bool_exp
  _or: [spider_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
  start_urls: String_array_comparison_exp
}

"""
unique or primary key constraints on table "spider"
"""
enum spider_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  spider_id_key

  """
  unique or primary key constraint on columns "name"
  """
  spider_name_key

  """
  unique or primary key constraint on columns "id"
  """
  spider_pkey

  """
  unique or primary key constraint on columns "start_urls"
  """
  spider_start_urls_key
}

"""
input type for inserting data into table "spider"
"""
input spider_insert_input {
  id: uuid
  name: String
  start_urls: [String!]
}

"""aggregate max on columns"""
type spider_max_fields {
  id: uuid
  name: String
  start_urls: [String!]
}

"""aggregate min on columns"""
type spider_min_fields {
  id: uuid
  name: String
  start_urls: [String!]
}

"""
response of any mutation on the table "spider"
"""
type spider_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [spider!]!
}

"""
on_conflict condition type for table "spider"
"""
input spider_on_conflict {
  constraint: spider_constraint!
  update_columns: [spider_update_column!]! = []
  where: spider_bool_exp
}

"""Ordering options when selecting data from "spider"."""
input spider_order_by {
  id: order_by
  name: order_by
  start_urls: order_by
}

"""primary key columns input for table: spider"""
input spider_pk_columns_input {
  id: uuid!
}

"""
select columns of table "spider"
"""
enum spider_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  start_urls
}

"""
input type for updating data in table "spider"
"""
input spider_set_input {
  id: uuid
  name: String
  start_urls: [String!]
}

"""
Streaming cursor of the table "spider"
"""
input spider_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: spider_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input spider_stream_cursor_value_input {
  id: uuid
  name: String
  start_urls: [String!]
}

"""
update columns of table "spider"
"""
enum spider_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  start_urls
}

input spider_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: spider_set_input

  """filter the rows which have to be updated"""
  where: spider_bool_exp!
}

"""
columns and relationships of "status"
"""
type status {
  comment: String!
  value: String!
}

"""
aggregated selection of "status"
"""
type status_aggregate {
  aggregate: status_aggregate_fields
  nodes: [status!]!
}

"""
aggregate fields of "status"
"""
type status_aggregate_fields {
  count(columns: [status_select_column!], distinct: Boolean): Int!
  max: status_max_fields
  min: status_min_fields
}

"""
Boolean expression to filter rows from the table "status". All fields are combined with a logical 'AND'.
"""
input status_bool_exp {
  _and: [status_bool_exp!]
  _not: status_bool_exp
  _or: [status_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "status"
"""
enum status_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  status_pkey
}

"""
input type for inserting data into table "status"
"""
input status_insert_input {
  comment: String
  value: String
}

"""aggregate max on columns"""
type status_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type status_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "status"
"""
type status_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [status!]!
}

"""
on_conflict condition type for table "status"
"""
input status_on_conflict {
  constraint: status_constraint!
  update_columns: [status_update_column!]! = []
  where: status_bool_exp
}

"""Ordering options when selecting data from "status"."""
input status_order_by {
  comment: order_by
  value: order_by
}

"""primary key columns input for table: status"""
input status_pk_columns_input {
  value: String!
}

"""
select columns of table "status"
"""
enum status_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "status"
"""
input status_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "status"
"""
input status_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: status_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input status_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "status"
"""
enum status_update_column {
  """column name"""
  comment

  """column name"""
  value
}

input status_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: status_set_input

  """filter the rows which have to be updated"""
  where: status_bool_exp!
}

type subscription_root {
  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """An aggregate relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(id: uuid!): accounts

  """
  fetch data from the table in a streaming manner: "accounts"
  """
  accounts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [accounts_stream_cursor_input]!

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch data from the table: "agent"
  """
  agent(
    """distinct select on columns"""
    distinct_on: [agent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_order_by!]

    """filter the rows returned"""
    where: agent_bool_exp
  ): [agent!]!

  """
  fetch aggregated fields from the table: "agent"
  """
  agent_aggregate(
    """distinct select on columns"""
    distinct_on: [agent_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_order_by!]

    """filter the rows returned"""
    where: agent_bool_exp
  ): agent_aggregate!

  """fetch data from the table: "agent" using primary key columns"""
  agent_by_pk(id: uuid!): agent

  """
  fetch data from the table in a streaming manner: "agent"
  """
  agent_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [agent_stream_cursor_input]!

    """filter the rows returned"""
    where: agent_bool_exp
  ): [agent!]!

  """
  fetch data from the table: "agent_type"
  """
  agent_type(
    """distinct select on columns"""
    distinct_on: [agent_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_type_order_by!]

    """filter the rows returned"""
    where: agent_type_bool_exp
  ): [agent_type!]!

  """
  fetch aggregated fields from the table: "agent_type"
  """
  agent_type_aggregate(
    """distinct select on columns"""
    distinct_on: [agent_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [agent_type_order_by!]

    """filter the rows returned"""
    where: agent_type_bool_exp
  ): agent_type_aggregate!

  """fetch data from the table: "agent_type" using primary key columns"""
  agent_type_by_pk(id: Int!): agent_type

  """
  fetch data from the table in a streaming manner: "agent_type"
  """
  agent_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [agent_type_stream_cursor_input]!

    """filter the rows returned"""
    where: agent_type_bool_exp
  ): [agent_type!]!

  """
  fetch data from the table: "chunking_strategy"
  """
  chunking_strategy(
    """distinct select on columns"""
    distinct_on: [chunking_strategy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chunking_strategy_order_by!]

    """filter the rows returned"""
    where: chunking_strategy_bool_exp
  ): [chunking_strategy!]!

  """
  fetch aggregated fields from the table: "chunking_strategy"
  """
  chunking_strategy_aggregate(
    """distinct select on columns"""
    distinct_on: [chunking_strategy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chunking_strategy_order_by!]

    """filter the rows returned"""
    where: chunking_strategy_bool_exp
  ): chunking_strategy_aggregate!

  """
  fetch data from the table: "chunking_strategy" using primary key columns
  """
  chunking_strategy_by_pk(value: String!): chunking_strategy

  """
  fetch data from the table in a streaming manner: "chunking_strategy"
  """
  chunking_strategy_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [chunking_strategy_stream_cursor_input]!

    """filter the rows returned"""
    where: chunking_strategy_bool_exp
  ): [chunking_strategy!]!

  """
  fetch data from the table: "files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch aggregated fields from the table: "files"
  """
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!

  """fetch data from the table: "files" using primary key columns"""
  files_by_pk(id: uuid!): files

  """
  fetch data from the table in a streaming manner: "files"
  """
  files_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [files_stream_cursor_input]!

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table: "knowledge"
  """
  knowledge(
    """distinct select on columns"""
    distinct_on: [knowledge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_order_by!]

    """filter the rows returned"""
    where: knowledge_bool_exp
  ): [knowledge!]!

  """
  fetch aggregated fields from the table: "knowledge"
  """
  knowledge_aggregate(
    """distinct select on columns"""
    distinct_on: [knowledge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_order_by!]

    """filter the rows returned"""
    where: knowledge_bool_exp
  ): knowledge_aggregate!

  """
  fetch data from the table: "knowledge_base"
  """
  knowledge_base(
    """distinct select on columns"""
    distinct_on: [knowledge_base_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_order_by!]

    """filter the rows returned"""
    where: knowledge_base_bool_exp
  ): [knowledge_base!]!

  """
  fetch aggregated fields from the table: "knowledge_base"
  """
  knowledge_base_aggregate(
    """distinct select on columns"""
    distinct_on: [knowledge_base_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_order_by!]

    """filter the rows returned"""
    where: knowledge_base_bool_exp
  ): knowledge_base_aggregate!

  """fetch data from the table: "knowledge_base" using primary key columns"""
  knowledge_base_by_pk(id: uuid!): knowledge_base

  """
  fetch data from the table in a streaming manner: "knowledge_base"
  """
  knowledge_base_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [knowledge_base_stream_cursor_input]!

    """filter the rows returned"""
    where: knowledge_base_bool_exp
  ): [knowledge_base!]!

  """
  fetch data from the table: "knowledge_base_type"
  """
  knowledge_base_type(
    """distinct select on columns"""
    distinct_on: [knowledge_base_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_type_order_by!]

    """filter the rows returned"""
    where: knowledge_base_type_bool_exp
  ): [knowledge_base_type!]!

  """
  fetch aggregated fields from the table: "knowledge_base_type"
  """
  knowledge_base_type_aggregate(
    """distinct select on columns"""
    distinct_on: [knowledge_base_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [knowledge_base_type_order_by!]

    """filter the rows returned"""
    where: knowledge_base_type_bool_exp
  ): knowledge_base_type_aggregate!

  """
  fetch data from the table: "knowledge_base_type" using primary key columns
  """
  knowledge_base_type_by_pk(value: String!): knowledge_base_type

  """
  fetch data from the table in a streaming manner: "knowledge_base_type"
  """
  knowledge_base_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [knowledge_base_type_stream_cursor_input]!

    """filter the rows returned"""
    where: knowledge_base_type_bool_exp
  ): [knowledge_base_type!]!

  """fetch data from the table: "knowledge" using primary key columns"""
  knowledge_by_pk(id: uuid!): knowledge

  """
  fetch data from the table in a streaming manner: "knowledge"
  """
  knowledge_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [knowledge_stream_cursor_input]!

    """filter the rows returned"""
    where: knowledge_bool_exp
  ): [knowledge!]!

  """
  fetch data from the table: "message"
  """
  message(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): [message!]!

  """
  fetch aggregated fields from the table: "message"
  """
  message_aggregate(
    """distinct select on columns"""
    distinct_on: [message_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_order_by!]

    """filter the rows returned"""
    where: message_bool_exp
  ): message_aggregate!

  """fetch data from the table: "message" using primary key columns"""
  message_by_pk(id: uuid!): message

  """
  fetch data from the table: "message_feedback"
  """
  message_feedback(
    """distinct select on columns"""
    distinct_on: [message_feedback_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_feedback_order_by!]

    """filter the rows returned"""
    where: message_feedback_bool_exp
  ): [message_feedback!]!

  """
  fetch aggregated fields from the table: "message_feedback"
  """
  message_feedback_aggregate(
    """distinct select on columns"""
    distinct_on: [message_feedback_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_feedback_order_by!]

    """filter the rows returned"""
    where: message_feedback_bool_exp
  ): message_feedback_aggregate!

  """
  fetch data from the table: "message_feedback" using primary key columns
  """
  message_feedback_by_pk(value: String!): message_feedback

  """
  fetch data from the table in a streaming manner: "message_feedback"
  """
  message_feedback_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [message_feedback_stream_cursor_input]!

    """filter the rows returned"""
    where: message_feedback_bool_exp
  ): [message_feedback!]!

  """
  fetch data from the table: "message_role"
  """
  message_role(
    """distinct select on columns"""
    distinct_on: [message_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_role_order_by!]

    """filter the rows returned"""
    where: message_role_bool_exp
  ): [message_role!]!

  """
  fetch aggregated fields from the table: "message_role"
  """
  message_role_aggregate(
    """distinct select on columns"""
    distinct_on: [message_role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_role_order_by!]

    """filter the rows returned"""
    where: message_role_bool_exp
  ): message_role_aggregate!

  """fetch data from the table: "message_role" using primary key columns"""
  message_role_by_pk(value: String!): message_role

  """
  fetch data from the table in a streaming manner: "message_role"
  """
  message_role_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [message_role_stream_cursor_input]!

    """filter the rows returned"""
    where: message_role_bool_exp
  ): [message_role!]!

  """
  fetch data from the table: "message_status"
  """
  message_status(
    """distinct select on columns"""
    distinct_on: [message_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_status_order_by!]

    """filter the rows returned"""
    where: message_status_bool_exp
  ): [message_status!]!

  """
  fetch aggregated fields from the table: "message_status"
  """
  message_status_aggregate(
    """distinct select on columns"""
    distinct_on: [message_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [message_status_order_by!]

    """filter the rows returned"""
    where: message_status_bool_exp
  ): message_status_aggregate!

  """fetch data from the table: "message_status" using primary key columns"""
  message_status_by_pk(value: String!): message_status

  """
  fetch data from the table in a streaming manner: "message_status"
  """
  message_status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [message_status_stream_cursor_input]!

    """filter the rows returned"""
    where: message_status_bool_exp
  ): [message_status!]!

  """
  fetch data from the table in a streaming manner: "message"
  """
  message_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [message_stream_cursor_input]!

    """filter the rows returned"""
    where: message_bool_exp
  ): [message!]!

  """
  fetch data from the table: "multimodal_data"
  """
  multimodal_data(
    """distinct select on columns"""
    distinct_on: [multimodal_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [multimodal_data_order_by!]

    """filter the rows returned"""
    where: multimodal_data_bool_exp
  ): [multimodal_data!]!

  """
  fetch aggregated fields from the table: "multimodal_data"
  """
  multimodal_data_aggregate(
    """distinct select on columns"""
    distinct_on: [multimodal_data_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [multimodal_data_order_by!]

    """filter the rows returned"""
    where: multimodal_data_bool_exp
  ): multimodal_data_aggregate!

  """fetch data from the table: "multimodal_data" using primary key columns"""
  multimodal_data_by_pk(id: uuid!): multimodal_data

  """
  fetch data from the table in a streaming manner: "multimodal_data"
  """
  multimodal_data_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [multimodal_data_stream_cursor_input]!

    """filter the rows returned"""
    where: multimodal_data_bool_exp
  ): [multimodal_data!]!

  """
  fetch data from the table: "prompt_hub"
  """
  prompt_hub(
    """distinct select on columns"""
    distinct_on: [prompt_hub_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_hub_order_by!]

    """filter the rows returned"""
    where: prompt_hub_bool_exp
  ): [prompt_hub!]!

  """
  fetch aggregated fields from the table: "prompt_hub"
  """
  prompt_hub_aggregate(
    """distinct select on columns"""
    distinct_on: [prompt_hub_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_hub_order_by!]

    """filter the rows returned"""
    where: prompt_hub_bool_exp
  ): prompt_hub_aggregate!

  """fetch data from the table: "prompt_hub" using primary key columns"""
  prompt_hub_by_pk(id: Int!): prompt_hub

  """
  fetch data from the table in a streaming manner: "prompt_hub"
  """
  prompt_hub_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [prompt_hub_stream_cursor_input]!

    """filter the rows returned"""
    where: prompt_hub_bool_exp
  ): [prompt_hub!]!

  """
  fetch data from the table: "prompt_template"
  """
  prompt_template(
    """distinct select on columns"""
    distinct_on: [prompt_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_template_order_by!]

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): [prompt_template!]!

  """
  fetch aggregated fields from the table: "prompt_template"
  """
  prompt_template_aggregate(
    """distinct select on columns"""
    distinct_on: [prompt_template_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompt_template_order_by!]

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): prompt_template_aggregate!

  """fetch data from the table: "prompt_template" using primary key columns"""
  prompt_template_by_pk(id: Int!): prompt_template

  """
  fetch data from the table in a streaming manner: "prompt_template"
  """
  prompt_template_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [prompt_template_stream_cursor_input]!

    """filter the rows returned"""
    where: prompt_template_bool_exp
  ): [prompt_template!]!

  """
  fetch data from the table: "provider_type"
  """
  provider_type(
    """distinct select on columns"""
    distinct_on: [provider_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_type_order_by!]

    """filter the rows returned"""
    where: provider_type_bool_exp
  ): [provider_type!]!

  """
  fetch aggregated fields from the table: "provider_type"
  """
  provider_type_aggregate(
    """distinct select on columns"""
    distinct_on: [provider_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [provider_type_order_by!]

    """filter the rows returned"""
    where: provider_type_bool_exp
  ): provider_type_aggregate!

  """fetch data from the table: "provider_type" using primary key columns"""
  provider_type_by_pk(value: String!): provider_type

  """
  fetch data from the table in a streaming manner: "provider_type"
  """
  provider_type_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [provider_type_stream_cursor_input]!

    """filter the rows returned"""
    where: provider_type_bool_exp
  ): [provider_type!]!

  """
  fetch data from the table: "r_agent_kb"
  """
  r_agent_kb(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): [r_agent_kb!]!

  """
  fetch aggregated fields from the table: "r_agent_kb"
  """
  r_agent_kb_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_kb_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_kb_order_by!]

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): r_agent_kb_aggregate!

  """fetch data from the table: "r_agent_kb" using primary key columns"""
  r_agent_kb_by_pk(id: Int!): r_agent_kb

  """
  fetch data from the table in a streaming manner: "r_agent_kb"
  """
  r_agent_kb_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [r_agent_kb_stream_cursor_input]!

    """filter the rows returned"""
    where: r_agent_kb_bool_exp
  ): [r_agent_kb!]!

  """
  fetch data from the table: "r_agent_user"
  """
  r_agent_user(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): [r_agent_user!]!

  """
  fetch aggregated fields from the table: "r_agent_user"
  """
  r_agent_user_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): r_agent_user_aggregate!

  """fetch data from the table: "r_agent_user" using primary key columns"""
  r_agent_user_by_pk(id: Int!): r_agent_user

  """
  fetch data from the table in a streaming manner: "r_agent_user"
  """
  r_agent_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [r_agent_user_stream_cursor_input]!

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): [r_agent_user!]!

  """
  fetch data from the table: "r_kb_user"
  """
  r_kb_user(
    """distinct select on columns"""
    distinct_on: [r_kb_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_kb_user_order_by!]

    """filter the rows returned"""
    where: r_kb_user_bool_exp
  ): [r_kb_user!]!

  """
  fetch aggregated fields from the table: "r_kb_user"
  """
  r_kb_user_aggregate(
    """distinct select on columns"""
    distinct_on: [r_kb_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_kb_user_order_by!]

    """filter the rows returned"""
    where: r_kb_user_bool_exp
  ): r_kb_user_aggregate!

  """fetch data from the table: "r_kb_user" using primary key columns"""
  r_kb_user_by_pk(id: Int!): r_kb_user

  """
  fetch data from the table in a streaming manner: "r_kb_user"
  """
  r_kb_user_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [r_kb_user_stream_cursor_input]!

    """filter the rows returned"""
    where: r_kb_user_bool_exp
  ): [r_kb_user!]!

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  role_aggregate(
    """distinct select on columns"""
    distinct_on: [role_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [role_order_by!]

    """filter the rows returned"""
    where: role_bool_exp
  ): role_aggregate!

  """fetch data from the table: "role" using primary key columns"""
  role_by_pk(value: String!): role

  """
  fetch data from the table in a streaming manner: "role"
  """
  role_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [role_stream_cursor_input]!

    """filter the rows returned"""
    where: role_bool_exp
  ): [role!]!

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!

  """fetch data from the table: "sessions" using primary key columns"""
  sessions_by_pk(sessionToken: String!): sessions

  """
  fetch data from the table in a streaming manner: "sessions"
  """
  sessions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [sessions_stream_cursor_input]!

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """
  fetch data from the table: "spider"
  """
  spider(
    """distinct select on columns"""
    distinct_on: [spider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [spider_order_by!]

    """filter the rows returned"""
    where: spider_bool_exp
  ): [spider!]!

  """
  fetch aggregated fields from the table: "spider"
  """
  spider_aggregate(
    """distinct select on columns"""
    distinct_on: [spider_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [spider_order_by!]

    """filter the rows returned"""
    where: spider_bool_exp
  ): spider_aggregate!

  """fetch data from the table: "spider" using primary key columns"""
  spider_by_pk(id: uuid!): spider

  """
  fetch data from the table in a streaming manner: "spider"
  """
  spider_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [spider_stream_cursor_input]!

    """filter the rows returned"""
    where: spider_bool_exp
  ): [spider!]!

  """
  fetch data from the table: "status"
  """
  status(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch aggregated fields from the table: "status"
  """
  status_aggregate(
    """distinct select on columns"""
    distinct_on: [status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [status_order_by!]

    """filter the rows returned"""
    where: status_bool_exp
  ): status_aggregate!

  """fetch data from the table: "status" using primary key columns"""
  status_by_pk(value: String!): status

  """
  fetch data from the table in a streaming manner: "status"
  """
  status_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [status_stream_cursor_input]!

    """filter the rows returned"""
    where: status_bool_exp
  ): [status!]!

  """
  fetch data from the table: "topic_history"
  """
  topic_history(
    """distinct select on columns"""
    distinct_on: [topic_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [topic_history_order_by!]

    """filter the rows returned"""
    where: topic_history_bool_exp
  ): [topic_history!]!

  """
  fetch aggregated fields from the table: "topic_history"
  """
  topic_history_aggregate(
    """distinct select on columns"""
    distinct_on: [topic_history_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [topic_history_order_by!]

    """filter the rows returned"""
    where: topic_history_bool_exp
  ): topic_history_aggregate!

  """fetch data from the table: "topic_history" using primary key columns"""
  topic_history_by_pk(id: uuid!): topic_history

  """
  fetch data from the table in a streaming manner: "topic_history"
  """
  topic_history_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [topic_history_stream_cursor_input]!

    """filter the rows returned"""
    where: topic_history_bool_exp
  ): [topic_history!]!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: uuid!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "verification_tokens"
  """
  verification_tokens(
    """distinct select on columns"""
    distinct_on: [verification_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_tokens_order_by!]

    """filter the rows returned"""
    where: verification_tokens_bool_exp
  ): [verification_tokens!]!

  """
  fetch aggregated fields from the table: "verification_tokens"
  """
  verification_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [verification_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_tokens_order_by!]

    """filter the rows returned"""
    where: verification_tokens_bool_exp
  ): verification_tokens_aggregate!

  """
  fetch data from the table: "verification_tokens" using primary key columns
  """
  verification_tokens_by_pk(token: String!): verification_tokens

  """
  fetch data from the table in a streaming manner: "verification_tokens"
  """
  verification_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [verification_tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: verification_tokens_bool_exp
  ): [verification_tokens!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""topic_history"""
type topic_history {
  agent_id: uuid
  created_at: timestamptz!
  id: uuid!
  title: String!
  updated_at: timestamptz!
  user_id: uuid
}

"""
aggregated selection of "topic_history"
"""
type topic_history_aggregate {
  aggregate: topic_history_aggregate_fields
  nodes: [topic_history!]!
}

"""
aggregate fields of "topic_history"
"""
type topic_history_aggregate_fields {
  count(columns: [topic_history_select_column!], distinct: Boolean): Int!
  max: topic_history_max_fields
  min: topic_history_min_fields
}

"""
Boolean expression to filter rows from the table "topic_history". All fields are combined with a logical 'AND'.
"""
input topic_history_bool_exp {
  _and: [topic_history_bool_exp!]
  _not: topic_history_bool_exp
  _or: [topic_history_bool_exp!]
  agent_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "topic_history"
"""
enum topic_history_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  topic_history_pkey
}

"""
input type for inserting data into table "topic_history"
"""
input topic_history_insert_input {
  agent_id: uuid
  created_at: timestamptz
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate max on columns"""
type topic_history_max_fields {
  agent_id: uuid
  created_at: timestamptz
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate min on columns"""
type topic_history_min_fields {
  agent_id: uuid
  created_at: timestamptz
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
response of any mutation on the table "topic_history"
"""
type topic_history_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [topic_history!]!
}

"""
on_conflict condition type for table "topic_history"
"""
input topic_history_on_conflict {
  constraint: topic_history_constraint!
  update_columns: [topic_history_update_column!]! = []
  where: topic_history_bool_exp
}

"""Ordering options when selecting data from "topic_history"."""
input topic_history_order_by {
  agent_id: order_by
  created_at: order_by
  id: order_by
  title: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: topic_history"""
input topic_history_pk_columns_input {
  id: uuid!
}

"""
select columns of table "topic_history"
"""
enum topic_history_select_column {
  """column name"""
  agent_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
input type for updating data in table "topic_history"
"""
input topic_history_set_input {
  agent_id: uuid
  created_at: timestamptz
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "topic_history"
"""
input topic_history_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: topic_history_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input topic_history_stream_cursor_value_input {
  agent_id: uuid
  created_at: timestamptz
  id: uuid
  title: String
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "topic_history"
"""
enum topic_history_update_column {
  """column name"""
  agent_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  title

  """column name"""
  updated_at

  """column name"""
  user_id
}

input topic_history_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: topic_history_set_input

  """filter the rows which have to be updated"""
  where: topic_history_bool_exp!
}

"""
columns and relationships of "users"
"""
type users {
  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """An aggregate relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """An array relationship"""
  agents(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): [r_agent_user!]!

  """An aggregate relationship"""
  agents_aggregate(
    """distinct select on columns"""
    distinct_on: [r_agent_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [r_agent_user_order_by!]

    """filter the rows returned"""
    where: r_agent_user_bool_exp
  ): r_agent_user_aggregate!
  email: String!
  emailVerified: timestamptz
  id: uuid!
  image: String
  name: String

  """An array relationship"""
  sessions(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): [sessions!]!

  """An aggregate relationship"""
  sessions_aggregate(
    """distinct select on columns"""
    distinct_on: [sessions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sessions_order_by!]

    """filter the rows returned"""
    where: sessions_bool_exp
  ): sessions_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  accounts: accounts_bool_exp
  accounts_aggregate: accounts_aggregate_bool_exp
  agents: r_agent_user_bool_exp
  agents_aggregate: r_agent_user_aggregate_bool_exp
  email: String_comparison_exp
  emailVerified: timestamptz_comparison_exp
  id: uuid_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  sessions: sessions_bool_exp
  sessions_aggregate: sessions_aggregate_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  accounts: accounts_arr_rel_insert_input
  agents: r_agent_user_arr_rel_insert_input
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
  sessions: sessions_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""aggregate min on columns"""
type users_min_fields {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  accounts_aggregate: accounts_aggregate_order_by
  agents_aggregate: r_agent_user_aggregate_order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  image: order_by
  name: order_by
  sessions_aggregate: sessions_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  email: String
  emailVerified: timestamptz
  id: uuid
  image: String
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name
}

input users_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "verification_tokens"
"""
type verification_tokens {
  expires: timestamptz!
  identifier: String!
  token: String!
}

"""
aggregated selection of "verification_tokens"
"""
type verification_tokens_aggregate {
  aggregate: verification_tokens_aggregate_fields
  nodes: [verification_tokens!]!
}

"""
aggregate fields of "verification_tokens"
"""
type verification_tokens_aggregate_fields {
  count(columns: [verification_tokens_select_column!], distinct: Boolean): Int!
  max: verification_tokens_max_fields
  min: verification_tokens_min_fields
}

"""
Boolean expression to filter rows from the table "verification_tokens". All fields are combined with a logical 'AND'.
"""
input verification_tokens_bool_exp {
  _and: [verification_tokens_bool_exp!]
  _not: verification_tokens_bool_exp
  _or: [verification_tokens_bool_exp!]
  expires: timestamptz_comparison_exp
  identifier: String_comparison_exp
  token: String_comparison_exp
}

"""
unique or primary key constraints on table "verification_tokens"
"""
enum verification_tokens_constraint {
  """
  unique or primary key constraint on columns "token"
  """
  verification_tokens_pkey
}

"""
input type for inserting data into table "verification_tokens"
"""
input verification_tokens_insert_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""aggregate max on columns"""
type verification_tokens_max_fields {
  expires: timestamptz
  identifier: String
  token: String
}

"""aggregate min on columns"""
type verification_tokens_min_fields {
  expires: timestamptz
  identifier: String
  token: String
}

"""
response of any mutation on the table "verification_tokens"
"""
type verification_tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [verification_tokens!]!
}

"""
on_conflict condition type for table "verification_tokens"
"""
input verification_tokens_on_conflict {
  constraint: verification_tokens_constraint!
  update_columns: [verification_tokens_update_column!]! = []
  where: verification_tokens_bool_exp
}

"""Ordering options when selecting data from "verification_tokens"."""
input verification_tokens_order_by {
  expires: order_by
  identifier: order_by
  token: order_by
}

"""primary key columns input for table: verification_tokens"""
input verification_tokens_pk_columns_input {
  token: String!
}

"""
select columns of table "verification_tokens"
"""
enum verification_tokens_select_column {
  """column name"""
  expires

  """column name"""
  identifier

  """column name"""
  token
}

"""
input type for updating data in table "verification_tokens"
"""
input verification_tokens_set_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""
Streaming cursor of the table "verification_tokens"
"""
input verification_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: verification_tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input verification_tokens_stream_cursor_value_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""
update columns of table "verification_tokens"
"""
enum verification_tokens_update_column {
  """column name"""
  expires

  """column name"""
  identifier

  """column name"""
  token
}

input verification_tokens_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: verification_tokens_set_input

  """filter the rows which have to be updated"""
  where: verification_tokens_bool_exp!
}